{"version":3,"file":"steps.js","names":["Status","getMessageAndTraceFromError","getStatusFromError","popUntilFindIncluded","reportStepStart","reportStepStop","clearStepsToFinalize","enqueueRuntimeMessage","getStepStack","getStepsToFinalize","popAllSteps","pushStep","setupStepFinalization","generateApiStepId","ALLURE_STEP_CMD_SUBJECT","isApiStep","descriptor","type","isLogStep","startAllureApiStep","name","pushAllureStep","id","reportStepError","error","status","statusDetails","stopAllureApiStepStackTip","associateErrorWithRunningSteps","stopCurrentAllureApiStep","findAndStopStepWithSubsteps","stepDescriptor","pred","stopSelectedSteps","stopAllSteps","finalizeSteps","forEach","finalizeOneStep","resolveStepStatus","step","PASSED","_ref","finalizer","data","stepStack","firstApiStepAfterLastLogStep","at","findLastIndex","logEntryOrMessage","Object","is","propagateErrorToStepDescriptor","errorOfSubstep","log","attributes","steps","stepEntry","stopStep"],"sources":["../../../src/browser/steps.ts"],"sourcesContent":["import type { StatusDetails } from \"allure-js-commons\";\nimport { Status } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type {\n  ApiStepDescriptor,\n  CypressStepFinalizeMessage,\n  LogStepDescriptor,\n  StepDescriptor,\n  StepFinalizer,\n} from \"../types.js\";\nimport { popUntilFindIncluded } from \"../utils.js\";\nimport { reportStepStart, reportStepStop } from \"./lifecycle.js\";\nimport {\n  clearStepsToFinalize,\n  enqueueRuntimeMessage,\n  getStepStack,\n  getStepsToFinalize,\n  popAllSteps,\n  pushStep,\n  setupStepFinalization,\n} from \"./state.js\";\nimport { generateApiStepId } from \"./utils.js\";\n\nexport const ALLURE_STEP_CMD_SUBJECT = {};\n\nexport const isApiStep = (descriptor: StepDescriptor): descriptor is ApiStepDescriptor => {\n  return descriptor.type === \"api\";\n};\n\nexport const isLogStep = (descriptor: StepDescriptor): descriptor is LogStepDescriptor => {\n  return descriptor.type === \"log\";\n};\n\nexport const startAllureApiStep = (name: string) => reportStepStart(pushAllureStep(), name);\n\nexport const pushAllureStep = () => {\n  const id = generateApiStepId();\n  pushStep({ id, type: \"api\" });\n  return id;\n};\n\nexport const reportStepError = (error: Error) => {\n  const status = getStatusFromError(error);\n  const statusDetails = getMessageAndTraceFromError(error);\n\n  // Cypress will abort the test/hook execution soon. No subsequent commands will be run, including the ones that\n  // have been scheduled by `allure.step` to stop the currently running steps.\n  // Additionally, we can't tell in advance if the current command log steps will be stopped normally or not.\n  //\n  // Given that, this function will stop all consecutive Allure API steps at the tip of the step stack.\n  // The command log steps will be given a chance to stop normally to get the most correct timings.\n  //\n  // The command log steps that won't stop normally (and Allure API substeps thereof) will be stopped during the\n  // test/hook finalization phase.\n  stopAllureApiStepStackTip(status, statusDetails);\n\n  // It's not guaranteed for command log steps and intermediate Allure API steps to have access to the error at the\n  // moment they are stopped.\n  // Additionally, Cypress may not update the stack trace of the error at that time. Until that happens, the stack\n  // trace points deep in the bundled code, which is little to no use for the user. Therefore, we need to associate\n  // the remaining steps with the error object to grab the updated stack trace later.\n  associateErrorWithRunningSteps(error);\n};\n\nexport const stopCurrentAllureApiStep = (status?: Status, statusDetails?: StatusDetails) =>\n  findAndStopStepWithSubsteps((stepDescriptor) => isApiStep(stepDescriptor), status, statusDetails);\n\nexport const findAndStopStepWithSubsteps = (\n  pred: (stepEntry: StepDescriptor) => boolean,\n  status?: Status,\n  statusDetails?: StatusDetails,\n) => stopSelectedSteps(popUntilFindIncluded(getStepStack(), pred), status, statusDetails);\n\nexport const stopAllSteps = (status?: Status, statusDetails?: StatusDetails) =>\n  stopSelectedSteps(popAllSteps(), status, statusDetails);\n\nexport const finalizeSteps = () => {\n  // This will stop all dangling steps (like log groups with missing endGroup calls or logs that haven't been\n  // finished by Cypress due to an error).\n  stopAllSteps();\n\n  getStepsToFinalize().forEach(finalizeOneStep);\n  clearStepsToFinalize();\n};\n\nexport const resolveStepStatus = (step: StepDescriptor) =>\n  step.error ? getStatusFromError(step.error) : Status.PASSED;\n\nconst finalizeOneStep = ([step, finalizer]: [StepDescriptor, StepFinalizer | undefined]) => {\n  const { id, error } = step;\n  const data: CypressStepFinalizeMessage[\"data\"] = { id };\n\n  if (error) {\n    // Cypress rewrites the stack trace of an error to point to the location in the test file. Until then, the stack\n    // trace points inside the messy bundle, which is not helpful. There are circumstances when we can't be sure this\n    // has happened when a step is about to stop. That's why we defer setting the status details until we are sure\n    // Cypress does its job.\n    data.statusDetails = getMessageAndTraceFromError(error);\n  }\n\n  finalizer?.(data);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_step_finalize\",\n    data,\n  });\n};\n\nconst stopAllureApiStepStackTip = (status: Status, statusDetails: StatusDetails) => {\n  const stepStack = getStepStack();\n  const firstApiStepAfterLastLogStep = stepStack.at(stepStack.findLastIndex(isLogStep) + 1);\n  if (firstApiStepAfterLastLogStep) {\n    findAndStopStepWithSubsteps(\n      (logEntryOrMessage) => Object.is(logEntryOrMessage, firstApiStepAfterLastLogStep),\n      status,\n      statusDetails,\n    );\n  }\n};\n\nconst propagateErrorToStepDescriptor = (step: StepDescriptor, errorOfSubstep: Error | undefined) => {\n  if (isLogStep(step)) {\n    const error = step.log.attributes.error;\n    if (error) {\n      return (step.error = error);\n    }\n  }\n\n  if (errorOfSubstep) {\n    step.error = errorOfSubstep;\n  }\n\n  return step.error;\n};\n\nconst stopSelectedSteps = (steps: readonly StepDescriptor[], status?: Status, statusDetails?: StatusDetails) => {\n  let error: Error | undefined;\n  for (const stepEntry of steps) {\n    error = propagateErrorToStepDescriptor(stepEntry, error);\n    stopStep(stepEntry, status, statusDetails);\n  }\n\n  if (error) {\n    associateErrorWithRunningSteps(error);\n  }\n};\n\nconst associateErrorWithRunningSteps = (error: Error) => getStepStack().forEach((step) => (step.error = error));\n\nconst stopStep = (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {\n  reportStepStop(step, status, statusDetails);\n\n  if (isApiStep(step) && step.error) {\n    setupStepFinalization(step);\n  }\n};\n"],"mappings":"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","ignoreList":[]}