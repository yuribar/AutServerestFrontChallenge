{"version":3,"file":"runtime.js","names":["Status","getMessageAndTraceFromError","getGlobalTestRuntime","setGlobalTestRuntime","enqueueRuntimeMessage","getRuntimeMessages","setRuntimeMessages","ALLURE_STEP_CMD_SUBJECT","startAllureApiStep","stopCurrentAllureApiStep","uint8ArrayToBase64","initTestRuntime","AllureCypressTestRuntime","getTestRuntime","_AllureCypressTestRuntime_brand","WeakSet","constructor","_classPrivateMethodInitSpec","_assertClassBrand","_resetMessages","call","labels","_len","arguments","length","Array","_key","_enqueueMessageAsync","type","data","links","_len2","_key2","parameter","name","value","options","parameters","_objectSpread","description","markdown","descriptionHtml","html","displayName","historyId","testCaseId","attachment","content","attachmentRawContent","actualEncoding","attachmentContent","encoding","contentType","fileExtension","attachmentFromPath","path","logStep","status","undefined","PASSED","error","cy","wrap","log","then","Cypress","Promise","resolve","step","body","result","stepDisplayName","stepParameter","mode","flushAllureMessagesToTask","taskName","messages","_dequeueAllMessages","task","absolutePath","spec","absolute","flushAllureMessagesToTaskAsync","args","isInteractive","config","message"],"sources":["../../../src/browser/runtime.ts"],"sourcesContent":["import { Status } from \"allure-js-commons\";\nimport type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError } from \"allure-js-commons/sdk\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { AllureCypressTaskArgs, CypressMessage } from \"../types.js\";\nimport { enqueueRuntimeMessage, getRuntimeMessages, setRuntimeMessages } from \"./state.js\";\nimport { ALLURE_STEP_CMD_SUBJECT, startAllureApiStep, stopCurrentAllureApiStep } from \"./steps.js\";\nimport { uint8ArrayToBase64 } from \"./utils.js\";\n\nexport const initTestRuntime = () => setGlobalTestRuntime(new AllureCypressTestRuntime() as TestRuntime);\n\nexport const getTestRuntime = () => getGlobalTestRuntime() as AllureCypressTestRuntime;\n\nclass AllureCypressTestRuntime implements TestRuntime {\n  constructor() {\n    this.#resetMessages();\n  }\n\n  labels(...labels: Label[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  // @ts-ignore\n  attachment(name: string, content: string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const actualEncoding = typeof attachmentRawContent === \"string\" ? \"utf8\" : \"base64\";\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.#enqueueMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.#enqueueMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  logStep(name: string, status: Status = Status.PASSED, error?: Error) {\n    return cy\n      .wrap(ALLURE_STEP_CMD_SUBJECT, { log: false })\n      .then(() => {\n        startAllureApiStep(name);\n        return Cypress.Promise.resolve();\n      })\n      .then(() => {\n        stopCurrentAllureApiStep(status, error ? getMessageAndTraceFromError(error) : undefined);\n        return Cypress.Promise.resolve();\n      });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(ALLURE_STEP_CMD_SUBJECT, { log: false })\n      .then(() => {\n        startAllureApiStep(name);\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        stopCurrentAllureApiStep();\n        return result;\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        name,\n      },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  flushAllureMessagesToTask(taskName: string) {\n    const messages = this.#dequeueAllMessages();\n    if (messages.length) {\n      cy.task(taskName, { absolutePath: Cypress.spec.absolute, messages }, { log: false });\n    }\n  }\n\n  flushAllureMessagesToTaskAsync(taskName: string): Cypress.Chainable<unknown> | undefined {\n    const messages = this.#dequeueAllMessages();\n    if (messages.length) {\n      const args: AllureCypressTaskArgs = {\n        absolutePath: Cypress.spec.absolute,\n        messages,\n        isInteractive: Cypress.config(\"isInteractive\"),\n      };\n      return cy.task(taskName, args, { log: false });\n    }\n  }\n\n  #resetMessages() {\n    setRuntimeMessages([]);\n  }\n\n  #enqueueMessageAsync(message: CypressMessage): PromiseLike<void> {\n    enqueueRuntimeMessage(message);\n    return Cypress.Promise.resolve();\n  }\n\n  #dequeueAllMessages() {\n    const messages = getRuntimeMessages();\n    this.#resetMessages();\n    return messages;\n  }\n}\n"],"mappings":"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","ignoreList":[]}