{"version":3,"file":"lifecycle.js","names":["ContentType","Status","getMessageAndTraceFromError","getStatusFromError","getTestRuntime","dropCurrentTest","enqueueRuntimeMessage","getCurrentTest","setCurrentTest","finalizeSteps","stopAllSteps","getStatusDataOfTestSkippedByHookError","getStepStopData","getSuitePath","getTestSkipData","getTestStartData","getTestStopData","isAllureHook","isLastRootAfterHook","isTestReported","iterateTests","markTestAsReported","reportRunStart","type","data","reportSuiteStart","suite","id","name","title","root","start","Date","now","reportSuiteEnd","stop","reportHookStart","hook","scopeType","hookName","includes","position","reportHookEnd","_hook$duration","duration","reportTestStart","test","reportStepStart","reportStepStop","step","status","statusDetails","reportTestPass","reportTestOrHookFail","err","completeHookErrorReporting","isEachHook","parent","testFailData","reportCurrentTestIfAny","reportRemainingTests","reportTestSkip","SKIPPED","message","reportTestEnd","_test$duration","_retries","retries","reportScreenshot","path","contentType","PNG","completeSpecIfNoAfterHookLeft","context","completeSpecAsync","completeSpecOnAfterHookFailure","hookError","allureError","logAllureRootAfterError","throwAfterSpecCompletion","_completeSpecOnAfterH","chain","then","flushRuntimeMessages","flushAllureMessagesToTask","flushAllureMessagesToTaskAsync","currentTest","reportTestsSkippedByHookError","pending","_objectSpread","suites","map","s","_context$test$title","_context$test","console","error","concat","_unused"],"sources":["../../../src/browser/lifecycle.ts"],"sourcesContent":["import { ContentType, Status } from \"allure-js-commons\";\nimport type { StatusDetails } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { CypressFailMessage, CypressHook, CypressSuite, CypressTest, StepDescriptor } from \"../types.js\";\nimport { getTestRuntime } from \"./runtime.js\";\nimport { dropCurrentTest, enqueueRuntimeMessage, getCurrentTest, setCurrentTest } from \"./state.js\";\nimport { finalizeSteps, stopAllSteps } from \"./steps.js\";\nimport {\n  getStatusDataOfTestSkippedByHookError,\n  getStepStopData,\n  getSuitePath,\n  getTestSkipData,\n  getTestStartData,\n  getTestStopData,\n  isAllureHook,\n  isLastRootAfterHook,\n  isTestReported,\n  iterateTests,\n  markTestAsReported,\n} from \"./utils.js\";\n\nexport const reportRunStart = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_run_start\",\n    data: {},\n  });\n};\n\nexport const reportSuiteStart = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_start\",\n    data: {\n      id: suite.id,\n      name: suite.title,\n      root: suite.root,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportSuiteEnd = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_end\",\n    data: {\n      root: suite.root,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportHookStart = (hook: CypressHook, start?: number) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_start\",\n    data: {\n      name: hook.title,\n      scopeType: hook.hookName.includes(\"each\") ? \"each\" : \"all\",\n      position: hook.hookName.includes(\"before\") ? \"before\" : \"after\",\n      start: start ?? Date.now(),\n    },\n  });\n};\n\nexport const reportHookEnd = (hook: CypressHook) => {\n  finalizeSteps();\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_end\",\n    data: {\n      duration: hook.duration ?? 0,\n    },\n  });\n};\n\nexport const reportTestStart = (test: CypressTest) => {\n  setCurrentTest(test);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_start\",\n    data: getTestStartData(test),\n  });\n  markTestAsReported(test);\n};\n\nexport const reportStepStart = (id: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_step_start\",\n    data: {\n      id,\n      name,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportStepStop = (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_step_stop\",\n    data: getStepStopData(step, status, statusDetails),\n  });\n};\n\nexport const reportTestPass = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_test_pass\",\n    data: {},\n  });\n};\n\nexport const reportTestOrHookFail = (err: Error) => {\n  const status = getStatusFromError(err);\n  const statusDetails = getMessageAndTraceFromError(err);\n\n  stopAllSteps(status, statusDetails);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_fail\",\n    data: {\n      status,\n      statusDetails,\n    },\n  });\n};\n\nexport const completeHookErrorReporting = (hook: CypressHook, err: Error) => {\n  const isEachHook = hook.hookName.includes(\"each\");\n  const suite = hook.parent!;\n  const testFailData = getStatusDataOfTestSkippedByHookError(hook.title, isEachHook, err, suite);\n\n  // Cypress doens't emit 'hook end' if the hook has failed.\n  reportHookEnd(hook);\n\n  // Cypress doens't emit 'test end' if the hook has failed.\n  // We must report the test's end manualy in case of a 'before each' hook.\n  reportCurrentTestIfAny();\n\n  // Cypress skips the remaining tests in the suite of a failed hook.\n  // We should include them to the report manually.\n  reportRemainingTests(suite, testFailData);\n};\n\nexport const reportTestSkip = (test: CypressTest) => {\n  if (isTestReported(test)) {\n    stopAllSteps(Status.SKIPPED, {\n      message: \"The test was skipped before the command was completed\",\n    });\n  } else {\n    reportTestStart(test);\n  }\n\n  enqueueRuntimeMessage({\n    type: \"cypress_test_skip\",\n    data: getTestSkipData(),\n  });\n};\n\nexport const reportTestEnd = (test: CypressTest) => {\n  finalizeSteps();\n  enqueueRuntimeMessage({\n    type: \"cypress_test_end\",\n    data: {\n      duration: test.duration ?? 0,\n      retries: (test as any)._retries ?? 0,\n    },\n  });\n  dropCurrentTest();\n};\n\nexport const reportScreenshot = (path: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"attachment_path\",\n    data: { path, name, contentType: ContentType.PNG },\n  });\n};\n\nexport const completeSpecIfNoAfterHookLeft = (context: Mocha.Context) => {\n  if (isLastRootAfterHook(context)) {\n    const hook = context.test as CypressHook;\n    if (!isAllureHook(hook)) {\n      reportHookEnd(hook);\n    }\n    return completeSpecAsync();\n  }\n};\n\nexport const completeSpecOnAfterHookFailure = (\n  context: Mocha.Context,\n  hookError: Error,\n): Cypress.Chainable<unknown> | undefined => {\n  try {\n    reportTestOrHookFail(hookError);\n    completeHookErrorReporting(context.test as CypressHook, hookError);\n\n    // cy.task's then doesn't have onrejected, that's why we don't log async Allure errors here.\n    return completeSpecAsync();\n  } catch (allureError) {\n    logAllureRootAfterError(context, allureError);\n  }\n};\n\nexport const throwAfterSpecCompletion = (context: Mocha.Context, err: any) => {\n  const chain = completeSpecOnAfterHookFailure(context, err as Error)?.then(() => {\n    throw err;\n  });\n  if (!chain) {\n    throw err;\n  }\n};\n\nexport const flushRuntimeMessages = () => getTestRuntime().flushAllureMessagesToTask(\"reportAllureCypressSpecMessages\");\n\nexport const completeSpecAsync = () =>\n  getTestRuntime().flushAllureMessagesToTaskAsync(\"reportFinalAllureCypressSpecMessages\");\n\nconst reportCurrentTestIfAny = () => {\n  const currentTest = getCurrentTest();\n  if (currentTest) {\n    reportTestEnd(currentTest);\n  }\n};\n\nconst reportRemainingTests = (suite: CypressSuite, testFailData: CypressFailMessage[\"data\"]) => {\n  for (const test of iterateTests(suite)) {\n    // Some tests in the suite might've been already reported.\n    if (!isTestReported(test)) {\n      reportTestsSkippedByHookError(\n        test,\n        test.pending ? { ...getTestSkipData(), status: Status.SKIPPED } : testFailData,\n      );\n    }\n  }\n};\n\nconst reportTestsSkippedByHookError = (test: CypressTest, testFailData: CypressFailMessage[\"data\"]) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_skipped_test\",\n    data: {\n      ...getTestStartData(test),\n      ...testFailData,\n      ...getTestStopData(test),\n      suites: getSuitePath(test).map((s) => s.id),\n    },\n  });\n  markTestAsReported(test);\n};\n\nconst logAllureRootAfterError = (context: Mocha.Context, err: unknown) => {\n  // We play safe and swallow errors here to keep the original 'after all' error.\n  try {\n    // eslint-disable-next-line no-console\n    console.error(`Unexpected error when reporting the failure of ${context.test?.title ?? \"'after all'\"}`);\n    // eslint-disable-next-line no-console\n    console.error(err);\n  } catch {}\n};\n"],"mappings":"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","ignoreList":[]}