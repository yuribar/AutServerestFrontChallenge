{"version":3,"file":"mocha.js","names":["completeHookErrorReporting","completeSpecIfNoAfterHookLeft","flushRuntimeMessages","reportTestPass","onPass","reportTestSkip","onPending","reportSuiteEnd","onSuiteEnd","reportTestEnd","onTestEnd","reportHookEnd","reportHookStart","reportRunStart","reportSuiteStart","reportTestOrHookFail","reportTestStart","initTestRuntime","applyTestPlan","isAllureHook","isRootAfterAllHook","isTestReported","ALLURE_REPORT_SYSTEM_HOOK","registerMochaEventListeners","Cypress","mocha","getRunner","on","onStart","onSuite","onHook","onHookEnd","onTest","onFail","injectFlushMessageHooks","afterEach","after","onAfterAll","suite","root","spec","hook","test","testOrHook","err","isHook","isAllureHookFailure","_testOrHook$duration","Date","now","duration"],"sources":["../../../../src/browser/events/mocha.ts"],"sourcesContent":["import type { CypressHook, CypressSuite, CypressTest } from \"../../types.js\";\nimport {\n  completeHookErrorReporting,\n  completeSpecIfNoAfterHookLeft,\n  flushRuntimeMessages,\n  reportTestPass as onPass,\n  reportTestSkip as onPending,\n  reportSuiteEnd as onSuiteEnd,\n  reportTestEnd as onTestEnd,\n  reportHookEnd,\n  reportHookStart,\n  reportRunStart,\n  reportSuiteStart,\n  reportTestOrHookFail,\n  reportTestStart,\n} from \"../lifecycle.js\";\nimport { initTestRuntime } from \"../runtime.js\";\nimport { applyTestPlan } from \"../testplan.js\";\nimport { isAllureHook, isRootAfterAllHook, isTestReported } from \"../utils.js\";\n\nexport const ALLURE_REPORT_SYSTEM_HOOK = \"__allure_report_system_hook__\";\n\nexport const registerMochaEventListeners = () => {\n  ((Cypress as any).mocha.getRunner() as Mocha.Runner)\n    .on(\"start\", onStart)\n    .on(\"suite\", onSuite)\n    .on(\"suite end\", onSuiteEnd)\n    .on(\"hook\", onHook)\n    .on(\"hook end\", onHookEnd)\n    .on(\"test\", onTest)\n    .on(\"pass\", onPass)\n    .on(\"fail\", onFail)\n    .on(\"pending\", onPending)\n    .on(\"test end\", onTestEnd);\n};\n\nexport const injectFlushMessageHooks = () => {\n  afterEach(ALLURE_REPORT_SYSTEM_HOOK, flushRuntimeMessages);\n  after(ALLURE_REPORT_SYSTEM_HOOK, onAfterAll);\n};\n\nconst onStart = () => {\n  initTestRuntime();\n  reportRunStart();\n};\n\nconst onSuite = (suite: CypressSuite) => {\n  if (suite.root) {\n    applyTestPlan(Cypress.spec, suite);\n  }\n  reportSuiteStart(suite);\n};\n\nconst onHook = (hook: CypressHook) => {\n  if (isAllureHook(hook)) {\n    return;\n  }\n\n  reportHookStart(hook);\n};\n\nconst onHookEnd = (hook: CypressHook) => {\n  if (isAllureHook(hook)) {\n    return;\n  }\n\n  reportHookEnd(hook);\n};\n\nconst onTest = (test: CypressTest) => {\n  // Cypress emits an extra EVENT_TEST_BEGIN if the test is skipped.\n  // reportTestSkip does that already, so we need to filter the extra event out.\n  if (!isTestReported(test)) {\n    reportTestStart(test);\n  }\n};\n\nconst onFail = (testOrHook: CypressTest | CypressHook, err: Error) => {\n  const isHook = \"hookName\" in testOrHook;\n  if (isHook && isRootAfterAllHook(testOrHook)) {\n    // Errors in spec-level 'after all' hooks are handled by Allure wrappers.\n    return;\n  }\n\n  const isAllureHookFailure = isHook && isAllureHook(testOrHook);\n\n  if (isAllureHookFailure) {\n    // Normally, Allure hooks are skipped from the report.\n    // In case of errors, it will be helpful to see them.\n    reportHookStart(testOrHook, Date.now() - (testOrHook.duration ?? 0));\n  }\n\n  // This will mark the fixture and the test (if any) as failed/broken.\n  reportTestOrHookFail(err);\n\n  if (isHook) {\n    // This will end the fixture and test (if any) and will report the remaining\n    // tests in the hook's suite (the ones that will be skipped by Cypress/Mocha).\n    completeHookErrorReporting(testOrHook, err);\n  }\n};\n\nconst onAfterAll = function (this: Mocha.Context) {\n  flushRuntimeMessages();\n  completeSpecIfNoAfterHookLeft(this);\n};\n"],"mappings":"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","ignoreList":[]}