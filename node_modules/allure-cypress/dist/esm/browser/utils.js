function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { Status } from "allure-js-commons";
import { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from "allure-js-commons/sdk";
import { ALLURE_REPORT_SYSTEM_HOOK } from "./events/mocha.js";
import { getAllureState, getProjectDir } from "./state.js";
import { resolveStepStatus } from "./steps.js";
var IS_WIN = Cypress.platform === "win32";
export var getFileNameFromPath = path => path.substring(path.lastIndexOf(IS_WIN ? "\\" : "/") + 1);
export var resolveSpecRelativePath = spec => {
  var projectDir = getProjectDir();
  var specPath = projectDir ? spec.absolute.substring(projectDir.length + 1) : spec.relative;
  return IS_WIN ? specPath.replaceAll("\\", "/") : specPath;
};
export var uint8ArrayToBase64 = data => {
  // @ts-ignore
  var u8arrayLike = Array.isArray(data) || data.buffer;
  if (!u8arrayLike) {
    return data;
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  return btoa(String.fromCharCode.apply(null, data));
};
export var getTestStartData = test => {
  var _test$wallClockStarte, _test$wallClockStarte2;
  return _objectSpread(_objectSpread({}, getTestMetadata(test)), {}, {
    start: typeof test.wallClockStartedAt === "string" ? Date.parse(test.wallClockStartedAt) : ((_test$wallClockStarte = test.wallClockStartedAt) === null || _test$wallClockStarte === void 0 || (_test$wallClockStarte2 = _test$wallClockStarte.getTime) === null || _test$wallClockStarte2 === void 0 ? void 0 : _test$wallClockStarte2.call(_test$wallClockStarte)) || Date.now()
  });
};
export var getTestStopData = test => {
  var _test$duration, _retries;
  return {
    duration: (_test$duration = test.duration) !== null && _test$duration !== void 0 ? _test$duration : 0,
    retries: (_retries = test._retries) !== null && _retries !== void 0 ? _retries : 0
  };
};
export var getTestSkipData = () => ({
  statusDetails: {
    message: "This is a pending test"
  }
});
export var getStepStopData = (step, status, statusDetails) => {
  var data = {
    id: step.id,
    stop: Date.now(),
    status: status !== null && status !== void 0 ? status : resolveStepStatus(step)
  };
  if (statusDetails) {
    data.statusDetails = statusDetails;
  }
  return data;
};
var testReportedKey = Symbol("The test has been reported to Allure");
export var markTestAsReported = test => {
  test[testReportedKey] = true;
};
export var isTestReported = test => test[testReportedKey] === true;
export var iterateSuites = function* iterateSuites(parent) {
  var suiteStack = [];
  for (var s = parent; s; s = suiteStack.pop()) {
    yield s;

    // Pushing in reverse allows us to maintain depth-first pre-order traversal;
    // the same order is used by Mocha & Cypress.
    for (var i = s.suites.length - 1; i >= 0; i--) {
      suiteStack.push(s.suites[i]);
    }
  }
};
export var iterateTests = function* iterateTests(parent) {
  for (var suite of iterateSuites(parent)) {
    yield* suite.tests;
  }
};
export var getSuitePath = test => {
  var suites = [];
  for (var s = test.parent; s; s = s.parent) {
    suites.push(s);
  }
  suites.reverse();
  return suites;
};
export var getSuiteTitlePath = test => getSuitePath(test).filter(s => s.title).map(s => s.title);
export var generateApiStepId = () => (getAllureState().nextApiStepId++).toString();
export var getTestMetadata = test => {
  var rawName = test.title;
  var {
    cleanTitle: name,
    labels,
    links
  } = extractMetadataFromString(rawName);
  var suites = test.titlePath().slice(0, -1);
  var fullNameSuffix = "".concat([...suites, name].join(" "));
  return {
    name,
    labels,
    links,
    fullNameSuffix
  };
};
export var isAllureHook = hook => hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK);
export var isRootAfterAllHook = hook => hook.parent.root && hook.hookName === "after all";
export var isLastRootAfterHook = context => {
  var currentAfterAll = context.test;
  var rootSuite = context.test.parent;
  var hooks = rootSuite.hooks;
  var lastAfterAll = hooks.findLast(h => h.hookName === "after all");
  return (lastAfterAll === null || lastAfterAll === void 0 ? void 0 : lastAfterAll.hookId) === currentAfterAll.hookId;
};
export var getStatusDataOfTestSkippedByHookError = (hookTitle, isEachHook, err, suite) => {
  var status = isEachHook ? Status.SKIPPED : getStatusFromError(err);
  var {
    message,
    trace
  } = getMessageAndTraceFromError(err);
  return {
    status,
    statusDetails: {
      message: isEachHook ? getSkipReason(hookTitle, suite) : message,
      trace
    }
  };
};
var getSkipReason = (hookTitle, suite) => {
  var suiteName = suite.title ? "'".concat(suite.title, "'") : "root";
  return "'".concat(hookTitle, "' defined in the ").concat(suiteName, " suite has failed");
};
//# sourceMappingURL=utils.js.map