{"version":3,"file":"testplan.js","names":["LabelName","getAllureTestPlan","getTestMetadata","resolveSpecRelativePath","applyTestPlan","spec","root","testPlan","specPath","suite","iterateSuites","indicesToRemove","getIndicesOfDeselectedTests","tests","removeSortedIndices","parent","suiteStack","s","pop","i","suites","length","push","forEach","test","index","_labels$find","fullNameSuffix","labels","fullName","concat","allureId","find","_ref","name","ALLURE_ID","value","includedInTestPlan","arr","indices","splice","some","_test$id","id","toString","selector"],"sources":["../../../src/browser/testplan.ts"],"sourcesContent":["import { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport type { CypressSuite, CypressTest } from \"../types.js\";\nimport { getAllureTestPlan } from \"./state.js\";\nimport { getTestMetadata, resolveSpecRelativePath } from \"./utils.js\";\n\nexport const applyTestPlan = (spec: Cypress.Spec, root: CypressSuite) => {\n  const testPlan = getAllureTestPlan();\n  if (testPlan) {\n    const specPath = resolveSpecRelativePath(spec);\n    for (const suite of iterateSuites(root)) {\n      const indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, specPath, suite.tests);\n      removeSortedIndices(suite.tests, indicesToRemove);\n    }\n  }\n};\n\nconst iterateSuites = function* (parent: CypressSuite) {\n  const suiteStack: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = parent; s; s = suiteStack.pop()) {\n    yield s;\n\n    // Pushing in reverse allows us to maintain depth-first pre-order traversal -\n    // the same order as used by Mocha & Cypress.\n    for (let i = s.suites.length - 1; i >= 0; i--) {\n      suiteStack.push(s.suites[i]);\n    }\n  }\n};\n\nconst getIndicesOfDeselectedTests = (\n  testPlan: TestPlanV1,\n  spec: Cypress.Spec,\n  specPath: string,\n  tests: readonly CypressTest[],\n) => {\n  const indicesToRemove: number[] = [];\n  tests.forEach((test, index) => {\n    const { fullNameSuffix, labels } = getTestMetadata(test);\n    const fullName = `${specPath}#${fullNameSuffix}`;\n    const allureId = labels.find(({ name }) => name === LabelName.ALLURE_ID)?.value;\n\n    if (!includedInTestPlan(testPlan, fullName, allureId)) {\n      indicesToRemove.push(index);\n    }\n  });\n  return indicesToRemove;\n};\n\nconst removeSortedIndices = <T>(arr: T[], indices: readonly number[]) => {\n  for (let i = indices.length - 1; i >= 0; i--) {\n    arr.splice(indices[i], 1);\n  }\n};\n\nconst includedInTestPlan = (testPlan: TestPlanV1, fullName: string, allureId: string | undefined): boolean =>\n  testPlan.tests.some((test) => (allureId && test.id?.toString() === allureId) || test.selector === fullName);\n"],"mappings":"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","ignoreList":[]}