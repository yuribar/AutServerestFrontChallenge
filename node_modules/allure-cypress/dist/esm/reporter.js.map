{"version":3,"file":"reporter.js","names":["ContentType","Stage","Status","ReporterRuntime","createDefaultWriter","getEnvironmentLabels","getFrameworkLabel","getHostLabel","getLanguageLabel","getPackageLabel","getPosixPath","getProjectRoot","getRelativePath","getSuiteLabels","getThreadLabel","parseTestPlan","DEFAULT_RUNTIME_CONFIG","last","_endAllSpecs","WeakMap","_applyAllureCypressMessages","_startRun","_startSuite","_pushNewSuiteScope","_stopSuite","_writeLastSuiteScope","_startHook","_stopHook","_startTest","_addNewTestResult","_failHookAndTest","_passTest","_skipTest","_addSkippedTest","_stopTest","_stopExistingTestResult","_fixTestStepStops","_fixFixtureStepStops","_fixStepStops","_startStep","_stopStep","_finalizeStep","_applyRuntimeApiMessages","_emitPreviousTestScope","_resolveRootUuid","_attachSpecVideo","_emitRemainingScopes","_initializeSpecContext","AllureCypress","constructor","config","arguments","length","undefined","_defineProperty","Map","on","reportAllureCypressSpecMessages","args","_classPrivateFieldGet","call","reportFinalAllureCypressSpecMessages","isInteractive","endSpec","absolutePath","onAfterSpec","onAfterRun","spec","results","_results$video","absolute","video","endRun","allureRuntime","writeEnvironmentInfo","writeCategoriesDefinitions","specAbsolutePath","cypressVideoPath","specContext","specContextByAbsolutePath","get","delete","_classPrivateFieldInitSpec","keys","_ref","messages","forEach","message","type","context","data","_ref2","id","name","root","suiteNames","push","suiteId","scope","startScope","suiteScopes","suiteIdToScope","set","suiteScopeToId","_ref3","pop","writeScope","_ref4","scopeType","position","start","isEach","isAfterEach","testScope","fixture","startFixture","status","_ref5","duration","fixtureUuid","updateFixture","_fixture$status","PASSED","stopFixture","_ref6","fullNameSuffix","testResultData","_objectWithoutProperties","_excluded","test","videoScope","_ref7","scopes","labels","metadataLabels","otherTestData","_excluded2","startTest","_objectSpread","stage","RUNNING","specPath","fullName","concat","_ref8","statusDetails","setError","result","Object","assign","testUuid","updateTest","failed","testResult","_ref9","SKIPPED","_ref10","suites","retries","_excluded3","map","s","filter","Boolean","writeTest","_ref11","_ref12","parameters","value","toString","excluded","FINISHED","stopTest","_ref13","stop","steps","step","at","_ref14","properties","_excluded4","rootUuid","stepUuid","startStep","stepsByFrontEndId","_ref15","_excluded5","updateStep","r","stopStep","_ref16","_excluded6","applyRuntimeMessages","_context$fixture","shouldVideoBeAttached","videoOnFailOnly","writeAttachment","contentType","MP4","resultsDir","rest","_excluded7","writer","createRuntimeState","allureConfig","getRuntimeConfigDefaults","initialized","testPlan","projectDir","stepStack","stepsToFinalize","nextApiStepId","stepsFromCommands","maxArgumentLength","maxArgumentDepth","initializeRuntimeState","cypressConfig","env","allure","allureCypress","hasCypressConfig","allureCypressReporter","attachToCypress"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { FixtureResult, TestResult } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getPosixPath,\n  getProjectRoot,\n  getRelativePath,\n  getSuiteLabels,\n  getThreadLabel,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  AllureCypressTaskArgs,\n  AllureSpecState,\n  CypressFailMessage,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressSkippedTestMessage,\n  CypressStepFinalizeMessage,\n  CypressStepStartMessage,\n  CypressStepStopMessage,\n  CypressSuiteEndMessage,\n  CypressSuiteStartMessage,\n  CypressTestEndMessage,\n  CypressTestSkipMessage,\n  CypressTestStartMessage,\n  SpecContext,\n} from \"./types.js\";\nimport { DEFAULT_RUNTIME_CONFIG, last } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  specContextByAbsolutePath = new Map<string, SpecContext>();\n  videoOnFailOnly: boolean = false;\n\n  constructor(config: AllureCypressConfig = {}) {\n    const { resultsDir, videoOnFailOnly = false, ...rest } = config;\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...rest,\n    });\n  }\n\n  attachToCypress = (on: Cypress.PluginEvents) => {\n    on(\"task\", {\n      reportAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        return null;\n      },\n      reportFinalAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        if (args.isInteractive) {\n          // In non-interactive mode the spec is ended via the 'after:spec' event instead\n          // to get the spec's video.\n          this.endSpec(args.absolutePath);\n        }\n        return null;\n      },\n    });\n\n    // Emits the remaining fixtures and writes the video of the spec.\n    // In interactive mode it's invoked through the `reportFinalAllureCypressSpecMessages` task.\n    on(\"after:spec\", this.onAfterSpec);\n\n    // Emits the categories and env info. Doesn't work in interactive mode unless\n    // `experimentalInteractiveRunEvents` is set.\n    on(\"after:run\", this.onAfterRun);\n  };\n\n  /**\n   * Forward the `after:spec` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param spec The first argument of the `after:spec` event.\n   * @param results The second argument of the `after:spec` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:spec\", (spec, results) => {\n   *       allureReporter.onAfterSpec(spec, results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterSpec = (spec: Cypress.Spec, results: CypressCommandLine.RunResult | undefined) => {\n    this.endSpec(spec.absolute, results?.video ?? undefined);\n  };\n\n  /**\n   * Forward the `after:run` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param results The argument of the `after:run` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:run\", (results) => {\n   *       allureReporter.onAfterRun(results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterRun = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult | undefined,\n  ) => {\n    this.endRun();\n  };\n\n  endRun = () => {\n    this.#endAllSpecs();\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  };\n\n  endSpec = (specAbsolutePath: string, cypressVideoPath?: string) => {\n    const specContext = this.specContextByAbsolutePath.get(specAbsolutePath);\n    if (specContext) {\n      this.#attachSpecVideo(specContext, cypressVideoPath);\n      this.#emitRemainingScopes(specContext);\n      this.specContextByAbsolutePath.delete(specAbsolutePath);\n    }\n  };\n\n  #endAllSpecs = () => {\n    for (const specAbsolutePath of this.specContextByAbsolutePath.keys()) {\n      this.endSpec(specAbsolutePath);\n    }\n  };\n\n  #applyAllureCypressMessages = ({ messages, absolutePath }: AllureCypressTaskArgs) => {\n    messages.forEach((message) => {\n      if (message.type === \"cypress_run_start\") {\n        this.#startRun(absolutePath);\n        return;\n      }\n\n      const context = this.specContextByAbsolutePath.get(absolutePath);\n      if (!context) {\n        return;\n      }\n\n      switch (message.type) {\n        case \"cypress_suite_start\":\n          this.#startSuite(context, message);\n          break;\n        case \"cypress_suite_end\":\n          this.#stopSuite(context, message);\n          break;\n        case \"cypress_hook_start\":\n          this.#startHook(context, message);\n          break;\n        case \"cypress_hook_end\":\n          this.#stopHook(context, message);\n          break;\n        case \"cypress_test_start\":\n          this.#startTest(context, message);\n          break;\n        case \"cypress_test_pass\":\n          this.#passTest(context);\n          break;\n        case \"cypress_fail\":\n          this.#failHookAndTest(context, message);\n          break;\n        case \"cypress_test_skip\":\n          this.#skipTest(context, message);\n          break;\n        case \"cypress_skipped_test\":\n          this.#addSkippedTest(context, message);\n          break;\n        case \"cypress_test_end\":\n          this.#stopTest(context, message);\n          break;\n        case \"cypress_step_start\":\n          this.#startStep(context, message.data);\n          break;\n        case \"cypress_step_stop\":\n          this.#stopStep(context, message.data);\n          break;\n        case \"cypress_step_finalize\":\n          this.#finalizeStep(context, message.data);\n          break;\n        default:\n          this.#applyRuntimeApiMessages(context, message);\n          break;\n      }\n    });\n  };\n\n  #startRun = (absolutePath: string) => {\n    // This function is executed once on `cypress run`, but it can be executed\n    // multiple times during an interactive session (`cypress open`). Ideally,\n    // in that case, we should remove previous result objects that haven't been\n    // written yet, but it would've required support in ReporterRuntime.\n    // Currently, we're discarding the entire spec context.\n    this.#initializeSpecContext(absolutePath);\n  };\n\n  #startSuite = (context: SpecContext, { data: { id, name, root } }: CypressSuiteStartMessage) => {\n    this.#pushNewSuiteScope(context, id);\n    if (!root) {\n      this.#emitPreviousTestScope(context);\n      context.suiteNames.push(name);\n    }\n  };\n\n  #pushNewSuiteScope = (context: SpecContext, suiteId: string) => {\n    const scope = this.allureRuntime.startScope();\n    context.suiteScopes.push(scope);\n    context.suiteIdToScope.set(suiteId, scope);\n    context.suiteScopeToId.set(scope, suiteId);\n    return scope;\n  };\n\n  #stopSuite = (context: SpecContext, { data: { root } }: CypressSuiteEndMessage) => {\n    this.#emitPreviousTestScope(context);\n    if (!root) {\n      context.suiteNames.pop();\n    }\n    this.#writeLastSuiteScope(context);\n  };\n\n  #writeLastSuiteScope = (context: SpecContext) => {\n    const scope = context.suiteScopes.pop();\n    if (scope) {\n      const suiteId = context.suiteScopeToId.get(scope);\n      if (suiteId) {\n        context.suiteScopeToId.delete(scope);\n        context.suiteIdToScope.delete(suiteId);\n      }\n      this.allureRuntime.writeScope(scope);\n    }\n  };\n\n  #startHook = (context: SpecContext, { data: { name, scopeType, position, start } }: CypressHookStartMessage) => {\n    const isEach = scopeType === \"each\";\n    const isAfterEach = position === \"after\" && isEach;\n    if (!isAfterEach) {\n      this.#emitPreviousTestScope(context);\n    }\n\n    const scope = isEach ? context.testScope : last(context.suiteScopes);\n    if (scope) {\n      context.fixture = this.allureRuntime.startFixture(scope, position, {\n        name,\n        start,\n        status: undefined,\n      });\n    }\n  };\n\n  #stopHook = (context: SpecContext, { data: { duration } }: CypressHookEndMessage) => {\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, (fixture) => {\n        fixture.status ??= Status.PASSED;\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { duration });\n      this.#fixFixtureStepStops(fixtureUuid);\n      context.fixture = undefined;\n    }\n  };\n\n  #startTest = (context: SpecContext, { data: { fullNameSuffix, ...testResultData } }: CypressTestStartMessage) => {\n    this.#emitPreviousTestScope(context);\n    const testScope = this.allureRuntime.startScope();\n    context.testScope = testScope;\n    context.test = this.#addNewTestResult(context, fullNameSuffix, testResultData, [\n      context.videoScope,\n      ...context.suiteScopes,\n      testScope,\n    ]);\n  };\n\n  #addNewTestResult = (\n    context: SpecContext,\n    fullNameSuffix: string,\n    { labels: metadataLabels = [], ...otherTestData }: Partial<TestResult>,\n    scopes: string[],\n  ) =>\n    this.allureRuntime.startTest(\n      {\n        stage: Stage.RUNNING,\n        labels: [\n          getLanguageLabel(),\n          getFrameworkLabel(\"cypress\"),\n          ...getSuiteLabels(context.suiteNames),\n          ...metadataLabels,\n          ...getEnvironmentLabels(),\n          getHostLabel(),\n          getThreadLabel(),\n          getPackageLabel(context.specPath),\n        ],\n        fullName: `${getPosixPath(context.specPath)}#${fullNameSuffix}`,\n        ...otherTestData,\n      },\n      scopes,\n    );\n\n  #failHookAndTest = (context: SpecContext, { data: { status, statusDetails } }: CypressFailMessage) => {\n    const setError = (result: object) => Object.assign(result, { status, statusDetails });\n\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, setError);\n    }\n\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, setError);\n    }\n\n    context.failed = true;\n  };\n\n  #passTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.PASSED;\n      });\n    }\n  };\n\n  #skipTest = (context: SpecContext, { data: { statusDetails } }: CypressTestSkipMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.SKIPPED;\n        if (statusDetails) {\n          testResult.statusDetails = statusDetails;\n        }\n      });\n    }\n  };\n\n  #addSkippedTest = (\n    context: SpecContext,\n    { data: { fullNameSuffix, suites, duration, retries, ...testResultData } }: CypressSkippedTestMessage,\n  ) => {\n    // Tests skipped because of a hook error may share all suites of the current context\n    // or just a part thereof (if it's from a sibling suite).\n    const scopes = suites.map((s) => context.suiteIdToScope.get(s)).filter((s): s is string => Boolean(s));\n\n    const testUuid = this.#addNewTestResult(context, fullNameSuffix, testResultData, [context.videoScope, ...scopes]);\n    this.#stopExistingTestResult(testUuid, { duration, retries });\n    this.allureRuntime.writeTest(testUuid);\n  };\n\n  #stopTest = (context: SpecContext, { data }: CypressTestEndMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.#stopExistingTestResult(testUuid, data);\n      this.allureRuntime.writeTest(testUuid);\n      context.test = undefined;\n    }\n  };\n\n  #stopExistingTestResult = (testUuid: string, { retries, duration }: CypressTestEndMessage[\"data\"]) => {\n    this.allureRuntime.updateTest(testUuid, (testResult) => {\n      if (retries > 0) {\n        testResult.parameters.push({\n          name: \"Retry\",\n          value: retries.toString(),\n          excluded: true,\n        });\n      }\n      testResult.stage = Stage.FINISHED;\n    });\n    this.allureRuntime.stopTest(testUuid, { duration });\n    this.#fixTestStepStops(testUuid);\n  };\n\n  #fixTestStepStops = (testUuid: string) => {\n    this.allureRuntime.updateTest(testUuid, this.#fixStepStops);\n  };\n\n  #fixFixtureStepStops = (fixtureUuid: string) => {\n    this.allureRuntime.updateFixture(fixtureUuid, this.#fixStepStops);\n  };\n\n  #fixStepStops = ({ stop, steps = [] }: TestResult | FixtureResult) => {\n    if (stop) {\n      // In some circumstances, steps becomes dangling and are stopped at the test end/hook end events, which happen\n      // chronologically after the test or fixture ends. This leads to the steps' stop time being greater than the one\n      // of the test/fixture.\n      // The only steps that may be affected are the rightmost descendants of the test/fixture.\n      for (let step = steps.at(-1); step; step = step.steps.at(-1)) {\n        if (step.stop && step.stop > stop) {\n          step.stop = stop;\n        } else {\n          // Steps are always stopped child-to-parent. If a step's stop time is OK, its substeps are also correct.\n          return;\n        }\n      }\n    }\n  };\n\n  #startStep = (context: SpecContext, { id, ...properties }: CypressStepStartMessage[\"data\"]) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      const stepUuid = this.allureRuntime.startStep(rootUuid, undefined, properties);\n      if (stepUuid) {\n        context.stepsByFrontEndId.set(id, stepUuid);\n      }\n    }\n  };\n\n  #stopStep = (context: SpecContext, { id, stop, ...properties }: CypressStepStopMessage[\"data\"]) => {\n    const stepUuid = context.stepsByFrontEndId.get(id);\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        Object.assign(r, properties);\n      });\n      this.allureRuntime.stopStep(stepUuid, { stop });\n    }\n  };\n\n  #finalizeStep = (context: SpecContext, { id, ...properties }: CypressStepFinalizeMessage[\"data\"]) => {\n    const stepUuid = context.stepsByFrontEndId.get(id);\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        Object.assign(r, properties);\n      });\n      context.stepsByFrontEndId.delete(id);\n    }\n  };\n\n  #applyRuntimeApiMessages = (context: SpecContext, message: RuntimeMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      this.allureRuntime.applyRuntimeMessages(rootUuid, [message]);\n    }\n  };\n\n  /**\n   * We must defer emitting a test's scope until we receive all the test's `afterEach` hooks.\n   * At the same time, we should report it as early as we can. That means we should call this\n   * method in the following cases:\n   * - when an `after` hook of the test starts (`after` hooks are called later than `afterEach`)\n   * - when a `before` or `beforeEach` hook of the next test starts (in case the next test has `before`/`beforeEach` hooks)\n   * - when the next test starts (in case the next test doesn't have `before`/`beforeEach` hooks)\n   * - when the test's suite ends (in case the test is the last one in its suite, including the root suite of the spec)\n   * - when a nested suite starts\n   * - when the spec ends\n   */\n  #emitPreviousTestScope = (context: SpecContext) => {\n    const testScope = context.testScope;\n\n    // Checking the test allows us to tell `beforeEach` and `afterEach` apart.\n    // Here we're interested in `afterEach` only.\n    if (!context.test && testScope) {\n      this.allureRuntime.writeScope(testScope);\n      context.testScope = undefined;\n    }\n  };\n\n  #resolveRootUuid = (context: SpecContext) => context.fixture ?? context.test;\n\n  #attachSpecVideo = (context: SpecContext, cypressVideoPath?: string) => {\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || context.failed) && cypressVideoPath;\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(context.videoScope, \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n      this.allureRuntime.writeScope(context.videoScope);\n    }\n  };\n\n  #emitRemainingScopes = (context: SpecContext) => {\n    this.#emitPreviousTestScope(context);\n    context.suiteScopes.forEach((scope) => {\n      this.allureRuntime.writeScope(scope);\n    });\n  };\n\n  #initializeSpecContext = (absolutePath: string) => {\n    const specPath = getRelativePath(absolutePath);\n    const context: SpecContext = {\n      specPath,\n      test: undefined,\n      fixture: undefined,\n      stepsByFrontEndId: new Map(),\n      videoScope: this.allureRuntime.startScope(),\n      suiteIdToScope: new Map(),\n      suiteScopeToId: new Map(),\n      suiteScopes: [],\n      testScope: undefined,\n      suiteNames: [],\n      failed: false,\n    };\n    this.specContextByAbsolutePath.set(absolutePath, context);\n  };\n}\n\nconst createRuntimeState = (allureConfig?: AllureCypressConfig): AllureSpecState => ({\n  config: getRuntimeConfigDefaults(allureConfig),\n  initialized: false,\n  messages: [],\n  testPlan: parseTestPlan(),\n  projectDir: getProjectRoot(),\n  stepStack: [],\n  stepsToFinalize: [],\n  nextApiStepId: 0,\n});\n\nconst getRuntimeConfigDefaults = ({\n  stepsFromCommands: {\n    maxArgumentLength = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentLength,\n    maxArgumentDepth = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentDepth,\n  } = DEFAULT_RUNTIME_CONFIG.stepsFromCommands,\n}: AllureCypressConfig = DEFAULT_RUNTIME_CONFIG): AllureSpecState[\"config\"] => ({\n  stepsFromCommands: {\n    maxArgumentDepth,\n    maxArgumentLength,\n  },\n});\n\nconst initializeRuntimeState = (cypressConfig: Cypress.PluginConfigOptions, allureConfig?: AllureCypressConfig) => {\n  cypressConfig.env.allure = createRuntimeState(allureConfig);\n  return cypressConfig;\n};\n\n/**\n * Sets up Allure Cypress.\n * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).\n * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.\n * @param allureConfig An Allure configuration object (optional).\n * @example\n * ```javascript\n * import { defineConfig } from \"cypress\";\n * import { allureCypress } from \"allure-cypress/reporter\";\n *\n * export default defineConfig({\n *   e2e: {\n *     setupNodeEvents: (on, config) => {\n *       allureCypress(on, config, { videoOnFailOnly: true });\n *       return config;\n *     },\n *     // ...\n *   }\n * });\n * ```\n */\nexport const allureCypress = (\n  on: Cypress.PluginEvents,\n  cypressConfig?: Cypress.PluginConfigOptions,\n  allureConfig?: AllureCypressConfig,\n) => {\n  // Backward compatibility; mainly for JS users who have no type hints\n  if (!allureConfig && cypressConfig && !(\"env\" in cypressConfig)) {\n    allureConfig = cypressConfig as AllureCypressConfig;\n  }\n\n  const hasCypressConfig = cypressConfig && \"env\" in cypressConfig;\n\n  const allureCypressReporter = new AllureCypress(allureConfig);\n  allureCypressReporter.attachToCypress(on);\n\n  if (hasCypressConfig) {\n    initializeRuntimeState(cypressConfig, allureConfig);\n  }\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}