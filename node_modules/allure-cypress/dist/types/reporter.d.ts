import type Cypress from "cypress";
import { ReporterRuntime } from "allure-js-commons/sdk/reporter";
import type { AllureCypressConfig, SpecContext } from "./types.js";
export declare class AllureCypress {
    #private;
    allureRuntime: ReporterRuntime;
    specContextByAbsolutePath: Map<string, SpecContext>;
    videoOnFailOnly: boolean;
    constructor(config?: AllureCypressConfig);
    attachToCypress: (on: Cypress.PluginEvents) => void;
    /**
     * Forward the `after:spec` event into Allure Cypress using this function if
     * you need to define your own handler or combine Allure Cypress with other
     * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).
     * @param spec The first argument of the `after:spec` event.
     * @param results The second argument of the `after:spec` event. It's `undefined` in interactive mode.
     * @example
     * ```javascript
     * import { defineConfig } from "cypress";
     * import { allureCypress } from "allure-cypress/reporter";
     *
     * export default defineConfig({
     *   setupNodeEvents: (on, config) => {
     *     const allureReporter = allureCypress(on, config);
     *     on("after:spec", (spec, results) => {
     *       allureReporter.onAfterSpec(spec, results);
     *     });
     *     return config;
     *   }
     *   // ...
     * });
     * ```
     */
    onAfterSpec: (spec: Cypress.Spec, results: CypressCommandLine.RunResult | undefined) => void;
    /**
     * Forward the `after:run` event into Allure Cypress using this function if
     * you need to define your own handler or combine Allure Cypress with other
     * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).
     * @param results The argument of the `after:run` event. It's `undefined` in interactive mode.
     * @example
     * ```javascript
     * import { defineConfig } from "cypress";
     * import { allureCypress } from "allure-cypress/reporter";
     *
     * export default defineConfig({
     *   setupNodeEvents: (on, config) => {
     *     const allureReporter = allureCypress(on, config);
     *     on("after:run", (results) => {
     *       allureReporter.onAfterRun(results);
     *     });
     *     return config;
     *   }
     *   // ...
     * });
     * ```
     */
    onAfterRun: (results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult | undefined) => void;
    endRun: () => void;
    endSpec: (specAbsolutePath: string, cypressVideoPath?: string) => void;
}
/**
 * Sets up Allure Cypress.
 * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).
 * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.
 * @param allureConfig An Allure configuration object (optional).
 * @example
 * ```javascript
 * import { defineConfig } from "cypress";
 * import { allureCypress } from "allure-cypress/reporter";
 *
 * export default defineConfig({
 *   e2e: {
 *     setupNodeEvents: (on, config) => {
 *       allureCypress(on, config, { videoOnFailOnly: true });
 *       return config;
 *     },
 *     // ...
 *   }
 * });
 * ```
 */
export declare const allureCypress: (on: Cypress.PluginEvents, cypressConfig?: Cypress.PluginConfigOptions, allureConfig?: AllureCypressConfig) => AllureCypress;
