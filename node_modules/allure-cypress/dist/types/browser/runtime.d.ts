import { Status } from "allure-js-commons";
import type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions } from "allure-js-commons";
import type { TestRuntime } from "allure-js-commons/sdk/runtime";
export declare const initTestRuntime: () => void;
export declare const getTestRuntime: () => AllureCypressTestRuntime;
declare class AllureCypressTestRuntime implements TestRuntime {
    #private;
    constructor();
    labels(...labels: Label[]): PromiseLike<void>;
    links(...links: Link[]): PromiseLike<void>;
    parameter(name: string, value: string, options?: ParameterOptions): PromiseLike<void>;
    description(markdown: string): PromiseLike<void>;
    descriptionHtml(html: string): PromiseLike<void>;
    displayName(name: string): PromiseLike<void>;
    historyId(value: string): PromiseLike<void>;
    testCaseId(value: string): PromiseLike<void>;
    attachment(name: string, content: string, options: AttachmentOptions): PromiseLike<void>;
    attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, "encoding">): PromiseLike<void>;
    logStep(name: string, status?: Status, error?: Error): Cypress.Chainable<void>;
    step<T = void>(name: string, body: () => T | PromiseLike<T>): Cypress.ThenReturn<T, T>;
    stepDisplayName(name: string): PromiseLike<void>;
    stepParameter(name: string, value: string, mode?: ParameterMode): PromiseLike<void>;
    flushAllureMessagesToTask(taskName: string): void;
    flushAllureMessagesToTaskAsync(taskName: string): Cypress.Chainable<unknown> | undefined;
}
export {};
