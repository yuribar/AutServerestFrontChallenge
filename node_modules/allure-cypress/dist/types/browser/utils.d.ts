import { Status } from "allure-js-commons";
import type { StatusDetails } from "allure-js-commons";
import type { CypressHook, CypressSuite, CypressTest, StepDescriptor } from "../types.js";
export declare const getFileNameFromPath: (path: string) => string;
export declare const resolveSpecRelativePath: (spec: Cypress.Spec) => string;
export declare const uint8ArrayToBase64: (data: unknown) => string;
export declare const getTestStartData: (test: CypressTest) => {
    start: number;
    name: string;
    labels: import("allure-js-commons").Label[];
    links: import("allure-js-commons").Link[];
    fullNameSuffix: string;
};
export declare const getTestStopData: (test: CypressTest) => {
    duration: number;
    retries: any;
};
export declare const getTestSkipData: () => {
    statusDetails: {
        message: string;
    };
};
export declare const getStepStopData: (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {
    id: string;
    status: Status;
    statusDetails?: StatusDetails | undefined;
    stop: number;
};
export declare const markTestAsReported: (test: CypressTest) => void;
export declare const isTestReported: (test: CypressTest) => boolean;
export declare const iterateSuites: (parent: CypressSuite) => Generator<CypressSuite, void, unknown>;
export declare const iterateTests: (parent: CypressSuite) => Generator<Mocha.Test & {
    wallClockStartedAt?: Date | undefined;
    parent: CypressSuite | undefined;
}, void, undefined>;
export declare const getSuitePath: (test: CypressTest) => CypressSuite[];
export declare const getSuiteTitlePath: (test: CypressTest) => string[];
export declare const generateApiStepId: () => string;
export declare const getTestMetadata: (test: CypressTest) => {
    name: string;
    labels: import("allure-js-commons").Label[];
    links: import("allure-js-commons").Link[];
    fullNameSuffix: string;
};
export declare const isAllureHook: (hook: CypressHook) => boolean;
export declare const isRootAfterAllHook: (hook: CypressHook) => boolean;
export declare const isLastRootAfterHook: (context: Mocha.Context) => boolean;
export declare const getStatusDataOfTestSkippedByHookError: (hookTitle: string, isEachHook: boolean, err: Error, suite: CypressSuite) => {
    status: Status;
    statusDetails: {
        message: string | undefined;
        trace: string | undefined;
    };
};
