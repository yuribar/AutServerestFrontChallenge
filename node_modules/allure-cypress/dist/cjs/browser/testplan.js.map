{"version":3,"file":"testplan.js","names":["_allureJsCommons","require","_state","_utils","applyTestPlan","spec","root","testPlan","getAllureTestPlan","specPath","resolveSpecRelativePath","suite","iterateSuites","indicesToRemove","getIndicesOfDeselectedTests","tests","removeSortedIndices","exports","parent","suiteStack","s","pop","i","suites","length","push","forEach","test","index","_labels$find","fullNameSuffix","labels","getTestMetadata","fullName","concat","allureId","find","_ref","name","LabelName","ALLURE_ID","value","includedInTestPlan","arr","indices","splice","some","_test$id","id","toString","selector"],"sources":["../../../src/browser/testplan.ts"],"sourcesContent":["import { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport type { CypressSuite, CypressTest } from \"../types.js\";\nimport { getAllureTestPlan } from \"./state.js\";\nimport { getTestMetadata, resolveSpecRelativePath } from \"./utils.js\";\n\nexport const applyTestPlan = (spec: Cypress.Spec, root: CypressSuite) => {\n  const testPlan = getAllureTestPlan();\n  if (testPlan) {\n    const specPath = resolveSpecRelativePath(spec);\n    for (const suite of iterateSuites(root)) {\n      const indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, specPath, suite.tests);\n      removeSortedIndices(suite.tests, indicesToRemove);\n    }\n  }\n};\n\nconst iterateSuites = function* (parent: CypressSuite) {\n  const suiteStack: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = parent; s; s = suiteStack.pop()) {\n    yield s;\n\n    // Pushing in reverse allows us to maintain depth-first pre-order traversal -\n    // the same order as used by Mocha & Cypress.\n    for (let i = s.suites.length - 1; i >= 0; i--) {\n      suiteStack.push(s.suites[i]);\n    }\n  }\n};\n\nconst getIndicesOfDeselectedTests = (\n  testPlan: TestPlanV1,\n  spec: Cypress.Spec,\n  specPath: string,\n  tests: readonly CypressTest[],\n) => {\n  const indicesToRemove: number[] = [];\n  tests.forEach((test, index) => {\n    const { fullNameSuffix, labels } = getTestMetadata(test);\n    const fullName = `${specPath}#${fullNameSuffix}`;\n    const allureId = labels.find(({ name }) => name === LabelName.ALLURE_ID)?.value;\n\n    if (!includedInTestPlan(testPlan, fullName, allureId)) {\n      indicesToRemove.push(index);\n    }\n  });\n  return indicesToRemove;\n};\n\nconst removeSortedIndices = <T>(arr: T[], indices: readonly number[]) => {\n  for (let i = indices.length - 1; i >= 0; i--) {\n    arr.splice(indices[i], 1);\n  }\n};\n\nconst includedInTestPlan = (testPlan: TestPlanV1, fullName: string, allureId: string | undefined): boolean =>\n  testPlan.tests.some((test) => (allureId && test.id?.toString() === allureId) || test.selector === fullName);\n"],"mappings":"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","ignoreList":[]}