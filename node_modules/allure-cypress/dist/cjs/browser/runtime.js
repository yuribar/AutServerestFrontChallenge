"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTestRuntime = exports.getTestRuntime = void 0;
var _allureJsCommons = require("allure-js-commons");
var _sdk = require("allure-js-commons/sdk");
var _runtime = require("allure-js-commons/sdk/runtime");
var _state = require("./state.js");
var _steps = require("./steps.js");
var _utils = require("./utils.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var initTestRuntime = () => (0, _runtime.setGlobalTestRuntime)(new AllureCypressTestRuntime());
exports.initTestRuntime = initTestRuntime;
var getTestRuntime = () => (0, _runtime.getGlobalTestRuntime)();
exports.getTestRuntime = getTestRuntime;
var _AllureCypressTestRuntime_brand = /*#__PURE__*/new WeakSet();
class AllureCypressTestRuntime {
  constructor() {
    _classPrivateMethodInitSpec(this, _AllureCypressTestRuntime_brand);
    _assertClassBrand(_AllureCypressTestRuntime_brand, this, _resetMessages).call(this);
  }
  labels() {
    for (var _len = arguments.length, labels = new Array(_len), _key = 0; _key < _len; _key++) {
      labels[_key] = arguments[_key];
    }
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        labels
      }
    });
  }
  links() {
    for (var _len2 = arguments.length, links = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      links[_key2] = arguments[_key2];
    }
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        links
      }
    });
  }
  parameter(name, value, options) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        parameters: [_objectSpread({
          name,
          value
        }, options)]
      }
    });
  }
  description(markdown) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        description: markdown
      }
    });
  }
  descriptionHtml(html) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        descriptionHtml: html
      }
    });
  }
  displayName(name) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        displayName: name
      }
    });
  }
  historyId(value) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        historyId: value
      }
    });
  }
  testCaseId(value) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "metadata",
      data: {
        testCaseId: value
      }
    });
  }

  // @ts-ignore
  attachment(name, content, options) {
    // @ts-ignore
    var attachmentRawContent = (content === null || content === void 0 ? void 0 : content.type) === "Buffer" ? content.data : content;
    var actualEncoding = typeof attachmentRawContent === "string" ? "utf8" : "base64";
    var attachmentContent = (0, _utils.uint8ArrayToBase64)(attachmentRawContent);
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "attachment_content",
      data: {
        name,
        content: attachmentContent,
        encoding: actualEncoding,
        contentType: options.contentType,
        fileExtension: options.fileExtension
      }
    });
  }
  attachmentFromPath(name, path, options) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "attachment_path",
      data: {
        name,
        path,
        contentType: options.contentType,
        fileExtension: options.fileExtension
      }
    });
  }
  logStep(name) {
    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _allureJsCommons.Status.PASSED;
    var error = arguments.length > 2 ? arguments[2] : undefined;
    return cy.wrap(_steps.ALLURE_STEP_CMD_SUBJECT, {
      log: false
    }).then(() => {
      (0, _steps.startAllureApiStep)(name);
      return Cypress.Promise.resolve();
    }).then(() => {
      (0, _steps.stopCurrentAllureApiStep)(status, error ? (0, _sdk.getMessageAndTraceFromError)(error) : undefined);
      return Cypress.Promise.resolve();
    });
  }
  step(name, body) {
    return cy.wrap(_steps.ALLURE_STEP_CMD_SUBJECT, {
      log: false
    }).then(() => {
      (0, _steps.startAllureApiStep)(name);
      return Cypress.Promise.resolve(body());
    }).then(result => {
      (0, _steps.stopCurrentAllureApiStep)();
      return result;
    });
  }
  stepDisplayName(name) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "step_metadata",
      data: {
        name
      }
    });
  }
  stepParameter(name, value, mode) {
    return _assertClassBrand(_AllureCypressTestRuntime_brand, this, _enqueueMessageAsync).call(this, {
      type: "step_metadata",
      data: {
        parameters: [{
          name,
          value,
          mode
        }]
      }
    });
  }
  flushAllureMessagesToTask(taskName) {
    var messages = _assertClassBrand(_AllureCypressTestRuntime_brand, this, _dequeueAllMessages).call(this);
    if (messages.length) {
      cy.task(taskName, {
        absolutePath: Cypress.spec.absolute,
        messages
      }, {
        log: false
      });
    }
  }
  flushAllureMessagesToTaskAsync(taskName) {
    var messages = _assertClassBrand(_AllureCypressTestRuntime_brand, this, _dequeueAllMessages).call(this);
    if (messages.length) {
      var args = {
        absolutePath: Cypress.spec.absolute,
        messages,
        isInteractive: Cypress.config("isInteractive")
      };
      return cy.task(taskName, args, {
        log: false
      });
    }
  }
}
function _resetMessages() {
  (0, _state.setRuntimeMessages)([]);
}
function _enqueueMessageAsync(message) {
  (0, _state.enqueueRuntimeMessage)(message);
  return Cypress.Promise.resolve();
}
function _dequeueAllMessages() {
  var messages = (0, _state.getRuntimeMessages)();
  _assertClassBrand(_AllureCypressTestRuntime_brand, this, _resetMessages).call(this);
  return messages;
}
//# sourceMappingURL=runtime.js.map