{"version":3,"file":"commandLog.js","names":["_utils","require","_lifecycle","_serialize","_interopRequireDefault","_state","_steps","e","__esModule","default","shouldCreateStepFromCommandLogEntry","entry","event","instrument","attributes","isApiStepErrorLogEntry","exports","setupScreenshotAttachmentStep","originalName","name","step","getCurrentStep","isLogStep","commandName","props","nameFromProps","log","consoleProps","attachmentName","startCommandLogStep","currentLogEntry","getCurrentLogEntry","shouldStopCurrentLogStep","stopCommandLogStep","id","pushLogEntry","reportStepStart","getCommandLogStepName","scheduleCommandLogStepStop","entryId","findAndStopStepWithSubsteps","_ref","stepDescriptor","type","pushStep","setupStepFinalization","data","parameters","getCommandLogStepParameters","groupStart","end","originalEndGroup","endGroup","call","originalEnd","_ref2","Object","is","ALLURE_STEP_CMD_SUBJECT","_ref3","_ref4","_maybeGetAssertionLog","message","displayName","resolvedName","trim","resolvedMessage","maybeGetAssertionLogMessage","maybeGetCucumberLogMessage","renderProps","stepName","filter","Boolean","join","getLogProps","map","_ref5","k","v","toString","value","serializePropValue","getPropValueSetFilter","WELL_KNOWN_CUCUMBER_LOG_NAMES","includes","startsWith","endsWith","substring","length","isAssertionWithMessage","entries","_ref6","isDefined","isAssertLog","Message","_ref7","getStepStack","findLast","newLogEntry","currentEntryIsGroup","currentEntryType","newEntryType","_ref8"],"sources":["../../../src/browser/commandLog.ts"],"sourcesContent":["import type { Parameter } from \"allure-js-commons\";\nimport type { CypressLogEntry, LogStepDescriptor } from \"../types.js\";\nimport { isDefined } from \"../utils.js\";\nimport { reportStepStart } from \"./lifecycle.js\";\nimport serializePropValue from \"./serialize.js\";\nimport { getCurrentStep, getStepStack, pushStep, setupStepFinalization } from \"./state.js\";\nimport { ALLURE_STEP_CMD_SUBJECT, findAndStopStepWithSubsteps, isLogStep } from \"./steps.js\";\n\nexport const shouldCreateStepFromCommandLogEntry = (entry: CypressLogEntry) => {\n  const { event, instrument } = entry.attributes;\n  if (instrument !== \"command\") {\n    // We are interested in the \"TEST BODY\" panel only for now.\n    // Other instruments are logged in separate panels.\n    return false;\n  }\n\n  if (event) {\n    // Events are tricky to report as they may span across commands and even leave the test's scope.\n    // We ignore them for now.\n    return false;\n  }\n\n  if (isApiStepErrorLogEntry(entry)) {\n    // Cypress don't create a log message for 'cy.then' except when it throws an error.\n    // This is in particularly happens when the function passed to 'allure.step' throws. In such a case however,\n    // creating an extra step from the log entry is redundant because the error is already included in the report as\n    // a part of the step.\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks if the current step represents a cy.screenshot command log entry. If this is the case, associates the name\n * of the screenshot with the step. Later, that will allow converting the step with the attachment into the attachment\n * step.\n */\nexport const setupScreenshotAttachmentStep = (originalName: string | undefined, name: string) => {\n  const step = getCurrentStep();\n  if (step && isLogStep(step)) {\n    const {\n      name: commandName,\n      props: { name: nameFromProps },\n    } = step.log.attributes.consoleProps();\n    if (commandName === \"screenshot\" && nameFromProps === originalName) {\n      step.attachmentName = name;\n    }\n  }\n};\n\nexport const startCommandLogStep = (entry: CypressLogEntry) => {\n  const currentLogEntry = getCurrentLogEntry();\n\n  if (typeof currentLogEntry !== \"undefined\" && shouldStopCurrentLogStep(currentLogEntry.log, entry)) {\n    stopCommandLogStep(currentLogEntry.log.attributes.id);\n  }\n\n  pushLogEntry(entry);\n  reportStepStart(entry.attributes.id, getCommandLogStepName(entry));\n  scheduleCommandLogStepStop(entry);\n};\n\nexport const stopCommandLogStep = (entryId: string) => findAndStopStepWithSubsteps(({ id }) => id === entryId);\n\nconst pushLogEntry = (entry: CypressLogEntry) => {\n  const id = entry.attributes.id;\n  const stepDescriptor: LogStepDescriptor = { id, type: \"log\", log: entry };\n\n  pushStep(stepDescriptor);\n\n  // Some properties of some Command Log entries are undefined at the time the entry is stopped. An example is the\n  // Yielded property of some queries. We defer converting them to Allure step parameters until the test/hook ends.\n  setupStepFinalization(stepDescriptor, (data) => {\n    data.parameters = getCommandLogStepParameters(entry);\n\n    if (stepDescriptor.attachmentName) {\n      // Rename the step to match the attachment name. Once the names are the same, Allure will render the\n      // attachment in the place of the step.\n      data.name = stepDescriptor.attachmentName;\n    }\n  });\n};\n\nconst scheduleCommandLogStepStop = (entry: CypressLogEntry) => {\n  const { groupStart, end, id } = entry.attributes;\n  if (end) {\n    // Some entries are already completed (this is similar to the idea behind allure.logStep).\n    // Cypress won't call entry.end() in such a case, so we need to stop such a step now.\n    // Example: cy.log\n    stopCommandLogStep(id);\n  } else if (groupStart) {\n    // A logging group must be stopped be the user via the Cypress.Log.endGroup() call.\n    // If the call is missing, the corresponding step will be stopped either at the test's (the hook's) end.\n    const originalEndGroup = entry.endGroup;\n    entry.endGroup = function () {\n      stopCommandLogStep(id);\n      return originalEndGroup.call(this);\n    };\n  } else {\n    // Regular log entries are finalized by Cypress via the Cypress.Log.end() call. We're hooking into this function\n    // to complete the step at the same time.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalEnd = entry.end;\n    entry.end = function () {\n      stopCommandLogStep(id);\n      return originalEnd.call(this);\n    };\n  }\n};\n\nconst isApiStepErrorLogEntry = ({ attributes: { name, consoleProps } }: CypressLogEntry) =>\n  name === \"then\" && Object.is(consoleProps().props[\"Applied To\"], ALLURE_STEP_CMD_SUBJECT);\n\nconst getCommandLogStepName = (entry: CypressLogEntry) => {\n  const { name, message, displayName } = entry.attributes;\n  const resolvedName = (displayName ?? name).trim();\n  const resolvedMessage = (\n    maybeGetAssertionLogMessage(entry) ??\n    maybeGetCucumberLogMessage(entry) ??\n    entry.attributes.renderProps().message ??\n    message\n  ).trim();\n  const stepName = [resolvedName, resolvedMessage].filter(Boolean).join(\" \");\n  return stepName;\n};\n\nconst getCommandLogStepParameters = (entry: CypressLogEntry) =>\n  getLogProps(entry)\n    .map(([k, v]) => ({\n      name: k.toString(),\n      value: serializePropValue(v),\n    }))\n    .filter(getPropValueSetFilter(entry));\n\nconst WELL_KNOWN_CUCUMBER_LOG_NAMES = [\"Given\", \"When\", \"Then\", \"And\"];\n\nconst maybeGetCucumberLogMessage = (entry: CypressLogEntry) => {\n  const {\n    attributes: { name, message },\n  } = entry;\n  if (WELL_KNOWN_CUCUMBER_LOG_NAMES.includes(name.trim()) && message.startsWith(\"**\") && message.endsWith(\"**\")) {\n    return message.substring(2, message.length - 2);\n  }\n};\n\nconst getLogProps = (entry: CypressLogEntry) => {\n  const {\n    attributes: { consoleProps },\n  } = entry;\n  const isAssertionWithMessage = !!maybeGetAssertionLogMessage(entry);\n  const { props, name } = consoleProps();\n\n  // accessing LocalStorage after the page reload can stick the test runner\n  // to avoid the issue, we just need to log the command manually\n  // the problem potentially can happen with other storage related commands, like `clearAllLocalStorage`, `clearAllSessionStorage`, `getAllLocalStorage`, `getAllSessionStorage`, `setLocalStorage`, `setSessionStorage`\n  // but probably, we don't need to silent them all at this moment\n  // the context: https://github.com/allure-framework/allure-js/issues/1222\n  if ([\"clearLocalStorage\"].includes(name)) {\n    return [] as [string, unknown][];\n  }\n\n  // For assertion logs, we interpolate the 'Message' property, which contains unformatted assertion description,\n  // directly into the step's name.\n  // No need to keep the exact same information in the step's parameters.\n  return Object.entries(props).filter(([k, v]) => isDefined(v) && !(isAssertionWithMessage && k === \"Message\"));\n};\n\nconst maybeGetAssertionLogMessage = (entry: CypressLogEntry) => {\n  if (isAssertLog(entry)) {\n    const message = entry.attributes.consoleProps().props.Message;\n\n    if (message && typeof message === \"string\") {\n      return message;\n    }\n  }\n};\n\nconst isAssertLog = ({ attributes: { name } }: CypressLogEntry) => name === \"assert\";\n\nconst getCurrentLogEntry = () => getStepStack().findLast(isLogStep);\n\nconst shouldStopCurrentLogStep = (currentLogEntry: CypressLogEntry, newLogEntry: CypressLogEntry) => {\n  const { groupStart: currentEntryIsGroup, type: currentEntryType } = currentLogEntry.attributes;\n  const { type: newEntryType } = newLogEntry.attributes;\n\n  return !currentEntryIsGroup && (currentEntryType === \"child\" || newEntryType !== \"child\");\n};\n\nconst getPropValueSetFilter = (entry: CypressLogEntry) =>\n  entry.attributes.name === \"wrap\" ? () => true : ({ name, value }: Parameter) => name !== \"Yielded\" || value !== \"{}\";\n"],"mappings":";;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AAA6F,SAAAG,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAEtF,IAAMG,mCAAmC,GAAIC,KAAsB,IAAK;EAC7E,IAAM;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGF,KAAK,CAACG,UAAU;EAC9C,IAAID,UAAU,KAAK,SAAS,EAAE;IAC5B;IACA;IACA,OAAO,KAAK;EACd;EAEA,IAAID,KAAK,EAAE;IACT;IACA;IACA,OAAO,KAAK;EACd;EAEA,IAAIG,sBAAsB,CAACJ,KAAK,CAAC,EAAE;IACjC;IACA;IACA;IACA;IACA,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAK,OAAA,CAAAN,mCAAA,GAAAA,mCAAA;AAKO,IAAMO,6BAA6B,GAAGA,CAACC,YAAgC,EAAEC,IAAY,KAAK;EAC/F,IAAMC,IAAI,GAAG,IAAAC,qBAAc,EAAC,CAAC;EAC7B,IAAID,IAAI,IAAI,IAAAE,gBAAS,EAACF,IAAI,CAAC,EAAE;IAC3B,IAAM;MACJD,IAAI,EAAEI,WAAW;MACjBC,KAAK,EAAE;QAAEL,IAAI,EAAEM;MAAc;IAC/B,CAAC,GAAGL,IAAI,CAACM,GAAG,CAACZ,UAAU,CAACa,YAAY,CAAC,CAAC;IACtC,IAAIJ,WAAW,KAAK,YAAY,IAAIE,aAAa,KAAKP,YAAY,EAAE;MAClEE,IAAI,CAACQ,cAAc,GAAGT,IAAI;IAC5B;EACF;AACF,CAAC;AAACH,OAAA,CAAAC,6BAAA,GAAAA,6BAAA;AAEK,IAAMY,mBAAmB,GAAIlB,KAAsB,IAAK;EAC7D,IAAMmB,eAAe,GAAGC,kBAAkB,CAAC,CAAC;EAE5C,IAAI,OAAOD,eAAe,KAAK,WAAW,IAAIE,wBAAwB,CAACF,eAAe,CAACJ,GAAG,EAAEf,KAAK,CAAC,EAAE;IAClGsB,kBAAkB,CAACH,eAAe,CAACJ,GAAG,CAACZ,UAAU,CAACoB,EAAE,CAAC;EACvD;EAEAC,YAAY,CAACxB,KAAK,CAAC;EACnB,IAAAyB,0BAAe,EAACzB,KAAK,CAACG,UAAU,CAACoB,EAAE,EAAEG,qBAAqB,CAAC1B,KAAK,CAAC,CAAC;EAClE2B,0BAA0B,CAAC3B,KAAK,CAAC;AACnC,CAAC;AAACK,OAAA,CAAAa,mBAAA,GAAAA,mBAAA;AAEK,IAAMI,kBAAkB,GAAIM,OAAe,IAAK,IAAAC,kCAA2B,EAACC,IAAA;EAAA,IAAC;IAAEP;EAAG,CAAC,GAAAO,IAAA;EAAA,OAAKP,EAAE,KAAKK,OAAO;AAAA,EAAC;AAACvB,OAAA,CAAAiB,kBAAA,GAAAA,kBAAA;AAE/G,IAAME,YAAY,GAAIxB,KAAsB,IAAK;EAC/C,IAAMuB,EAAE,GAAGvB,KAAK,CAACG,UAAU,CAACoB,EAAE;EAC9B,IAAMQ,cAAiC,GAAG;IAAER,EAAE;IAAES,IAAI,EAAE,KAAK;IAAEjB,GAAG,EAAEf;EAAM,CAAC;EAEzE,IAAAiC,eAAQ,EAACF,cAAc,CAAC;;EAExB;EACA;EACA,IAAAG,4BAAqB,EAACH,cAAc,EAAGI,IAAI,IAAK;IAC9CA,IAAI,CAACC,UAAU,GAAGC,2BAA2B,CAACrC,KAAK,CAAC;IAEpD,IAAI+B,cAAc,CAACd,cAAc,EAAE;MACjC;MACA;MACAkB,IAAI,CAAC3B,IAAI,GAAGuB,cAAc,CAACd,cAAc;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC;AAED,IAAMU,0BAA0B,GAAI3B,KAAsB,IAAK;EAC7D,IAAM;IAAEsC,UAAU;IAAEC,GAAG;IAAEhB;EAAG,CAAC,GAAGvB,KAAK,CAACG,UAAU;EAChD,IAAIoC,GAAG,EAAE;IACP;IACA;IACA;IACAjB,kBAAkB,CAACC,EAAE,CAAC;EACxB,CAAC,MAAM,IAAIe,UAAU,EAAE;IACrB;IACA;IACA,IAAME,gBAAgB,GAAGxC,KAAK,CAACyC,QAAQ;IACvCzC,KAAK,CAACyC,QAAQ,GAAG,YAAY;MAC3BnB,kBAAkB,CAACC,EAAE,CAAC;MACtB,OAAOiB,gBAAgB,CAACE,IAAI,CAAC,IAAI,CAAC;IACpC,CAAC;EACH,CAAC,MAAM;IACL;IACA;IACA;IACA,IAAMC,WAAW,GAAG3C,KAAK,CAACuC,GAAG;IAC7BvC,KAAK,CAACuC,GAAG,GAAG,YAAY;MACtBjB,kBAAkB,CAACC,EAAE,CAAC;MACtB,OAAOoB,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC;IAC/B,CAAC;EACH;AACF,CAAC;AAED,IAAMtC,sBAAsB,GAAGwC,KAAA;EAAA,IAAC;IAAEzC,UAAU,EAAE;MAAEK,IAAI;MAAEQ;IAAa;EAAmB,CAAC,GAAA4B,KAAA;EAAA,OACrFpC,IAAI,KAAK,MAAM,IAAIqC,MAAM,CAACC,EAAE,CAAC9B,YAAY,CAAC,CAAC,CAACH,KAAK,CAAC,YAAY,CAAC,EAAEkC,8BAAuB,CAAC;AAAA;AAE3F,IAAMrB,qBAAqB,GAAI1B,KAAsB,IAAK;EAAA,IAAAgD,KAAA,EAAAC,KAAA,EAAAC,qBAAA;EACxD,IAAM;IAAE1C,IAAI;IAAE2C,OAAO;IAAEC;EAAY,CAAC,GAAGpD,KAAK,CAACG,UAAU;EACvD,IAAMkD,YAAY,GAAG,CAACD,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAI5C,IAAI,EAAE8C,IAAI,CAAC,CAAC;EACjD,IAAMC,eAAe,GAAG,EAAAP,KAAA,IAAAC,KAAA,IAAAC,qBAAA,GACtBM,2BAA2B,CAACxD,KAAK,CAAC,cAAAkD,qBAAA,cAAAA,qBAAA,GAClCO,0BAA0B,CAACzD,KAAK,CAAC,cAAAiD,KAAA,cAAAA,KAAA,GACjCjD,KAAK,CAACG,UAAU,CAACuD,WAAW,CAAC,CAAC,CAACP,OAAO,cAAAH,KAAA,cAAAA,KAAA,GACtCG,OAAO,EACPG,IAAI,CAAC,CAAC;EACR,IAAMK,QAAQ,GAAG,CAACN,YAAY,EAAEE,eAAe,CAAC,CAACK,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC1E,OAAOH,QAAQ;AACjB,CAAC;AAED,IAAMtB,2BAA2B,GAAIrC,KAAsB,IACzD+D,WAAW,CAAC/D,KAAK,CAAC,CACfgE,GAAG,CAACC,KAAA;EAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAAF,KAAA;EAAA,OAAM;IAChBzD,IAAI,EAAE0D,CAAC,CAACE,QAAQ,CAAC,CAAC;IAClBC,KAAK,EAAE,IAAAC,kBAAkB,EAACH,CAAC;EAC7B,CAAC;AAAA,CAAC,CAAC,CACFP,MAAM,CAACW,qBAAqB,CAACvE,KAAK,CAAC,CAAC;AAEzC,IAAMwE,6BAA6B,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;AAEtE,IAAMf,0BAA0B,GAAIzD,KAAsB,IAAK;EAC7D,IAAM;IACJG,UAAU,EAAE;MAAEK,IAAI;MAAE2C;IAAQ;EAC9B,CAAC,GAAGnD,KAAK;EACT,IAAIwE,6BAA6B,CAACC,QAAQ,CAACjE,IAAI,CAAC8C,IAAI,CAAC,CAAC,CAAC,IAAIH,OAAO,CAACuB,UAAU,CAAC,IAAI,CAAC,IAAIvB,OAAO,CAACwB,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC7G,OAAOxB,OAAO,CAACyB,SAAS,CAAC,CAAC,EAAEzB,OAAO,CAAC0B,MAAM,GAAG,CAAC,CAAC;EACjD;AACF,CAAC;AAED,IAAMd,WAAW,GAAI/D,KAAsB,IAAK;EAC9C,IAAM;IACJG,UAAU,EAAE;MAAEa;IAAa;EAC7B,CAAC,GAAGhB,KAAK;EACT,IAAM8E,sBAAsB,GAAG,CAAC,CAACtB,2BAA2B,CAACxD,KAAK,CAAC;EACnE,IAAM;IAAEa,KAAK;IAAEL;EAAK,CAAC,GAAGQ,YAAY,CAAC,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA,IAAI,CAAC,mBAAmB,CAAC,CAACyD,QAAQ,CAACjE,IAAI,CAAC,EAAE;IACxC,OAAO,EAAE;EACX;;EAEA;EACA;EACA;EACA,OAAOqC,MAAM,CAACkC,OAAO,CAAClE,KAAK,CAAC,CAAC+C,MAAM,CAACoB,KAAA;IAAA,IAAC,CAACd,CAAC,EAAEC,CAAC,CAAC,GAAAa,KAAA;IAAA,OAAK,IAAAC,gBAAS,EAACd,CAAC,CAAC,IAAI,EAAEW,sBAAsB,IAAIZ,CAAC,KAAK,SAAS,CAAC;EAAA,EAAC;AAC/G,CAAC;AAED,IAAMV,2BAA2B,GAAIxD,KAAsB,IAAK;EAC9D,IAAIkF,WAAW,CAAClF,KAAK,CAAC,EAAE;IACtB,IAAMmD,OAAO,GAAGnD,KAAK,CAACG,UAAU,CAACa,YAAY,CAAC,CAAC,CAACH,KAAK,CAACsE,OAAO;IAE7D,IAAIhC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC1C,OAAOA,OAAO;IAChB;EACF;AACF,CAAC;AAED,IAAM+B,WAAW,GAAGE,KAAA;EAAA,IAAC;IAAEjF,UAAU,EAAE;MAAEK;IAAK;EAAmB,CAAC,GAAA4E,KAAA;EAAA,OAAK5E,IAAI,KAAK,QAAQ;AAAA;AAEpF,IAAMY,kBAAkB,GAAGA,CAAA,KAAM,IAAAiE,mBAAY,EAAC,CAAC,CAACC,QAAQ,CAAC3E,gBAAS,CAAC;AAEnE,IAAMU,wBAAwB,GAAGA,CAACF,eAAgC,EAAEoE,WAA4B,KAAK;EACnG,IAAM;IAAEjD,UAAU,EAAEkD,mBAAmB;IAAExD,IAAI,EAAEyD;EAAiB,CAAC,GAAGtE,eAAe,CAAChB,UAAU;EAC9F,IAAM;IAAE6B,IAAI,EAAE0D;EAAa,CAAC,GAAGH,WAAW,CAACpF,UAAU;EAErD,OAAO,CAACqF,mBAAmB,KAAKC,gBAAgB,KAAK,OAAO,IAAIC,YAAY,KAAK,OAAO,CAAC;AAC3F,CAAC;AAED,IAAMnB,qBAAqB,GAAIvE,KAAsB,IACnDA,KAAK,CAACG,UAAU,CAACK,IAAI,KAAK,MAAM,GAAG,MAAM,IAAI,GAAGmF,KAAA;EAAA,IAAC;IAAEnF,IAAI;IAAE6D;EAAiB,CAAC,GAAAsB,KAAA;EAAA,OAAKnF,IAAI,KAAK,SAAS,IAAI6D,KAAK,KAAK,IAAI;AAAA","ignoreList":[]}