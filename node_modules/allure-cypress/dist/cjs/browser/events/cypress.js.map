{"version":3,"file":"cypress.js","names":["_commandLog","require","_lifecycle","_steps","_utils","registerCypressEventListeners","Cypress","on","onFail","onLogAdded","exports","enableReportingOfCypressScreenshots","Screenshot","defaults","onAfterScreenshot","_len","arguments","length","_ref","Array","_key","name","originalName","path","getFileNameFromPath","reportScreenshot","setupScreenshotAttachmentStep","_","entry","shouldCreateStepFromCommandLogEntry","startCommandLogStep","error","reportStepError","noSubsequentFailListeners","Object","is","listeners","at"],"sources":["../../../../src/browser/events/cypress.ts"],"sourcesContent":["import type { CypressLogEntry } from \"../../types.js\";\nimport {\n  setupScreenshotAttachmentStep,\n  shouldCreateStepFromCommandLogEntry,\n  startCommandLogStep,\n} from \"../commandLog.js\";\nimport { reportScreenshot } from \"../lifecycle.js\";\nimport { reportStepError } from \"../steps.js\";\nimport { getFileNameFromPath } from \"../utils.js\";\n\nexport const registerCypressEventListeners = () => Cypress.on(\"fail\", onFail).on(\"log:added\", onLogAdded);\n\nexport const enableReportingOfCypressScreenshots = () => Cypress.Screenshot.defaults({ onAfterScreenshot });\n\nconst onAfterScreenshot = (\n  ...[, { name: originalName, path }]: Parameters<Cypress.ScreenshotDefaultsOptions[\"onAfterScreenshot\"]>\n) => {\n  const name = originalName ?? getFileNameFromPath(path);\n\n  reportScreenshot(path, name);\n  setupScreenshotAttachmentStep(originalName, name);\n};\n\nconst onLogAdded = (_: Cypress.ObjectLike, entry: CypressLogEntry) => {\n  if (shouldCreateStepFromCommandLogEntry(entry)) {\n    startCommandLogStep(entry);\n  }\n};\n\nconst onFail = (error: Cypress.CypressError) => {\n  reportStepError(error);\n\n  // If there are more \"fail\" handlers yet to run, it's not our responsibility to throw.\n  // Otherwise, we won't give them any chance to do their job (EventEmitter stops executing handlers as soon\n  // as one of them throws - that is also true for eventemitter2, which is used by the browser-side of Cypress).\n  if (noSubsequentFailListeners()) {\n    throw error;\n  }\n};\n\nconst noSubsequentFailListeners = () => Object.is(Cypress.listeners(\"fail\").at(-1), onFail);\n"],"mappings":";;;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AAKA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAEO,IAAMI,6BAA6B,GAAGA,CAAA,KAAMC,OAAO,CAACC,EAAE,CAAC,MAAM,EAAEC,MAAM,CAAC,CAACD,EAAE,CAAC,WAAW,EAAEE,UAAU,CAAC;AAACC,OAAA,CAAAL,6BAAA,GAAAA,6BAAA;AAEnG,IAAMM,mCAAmC,GAAGA,CAAA,KAAML,OAAO,CAACM,UAAU,CAACC,QAAQ,CAAC;EAAEC;AAAkB,CAAC,CAAC;AAACJ,OAAA,CAAAC,mCAAA,GAAAA,mCAAA;AAE5G,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAElB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAAA,IADA,GAAG;IAAEC,IAAI,EAAEC,YAAY;IAAEC;EAAK,CAAC,CAAC,GAAAL,IAAA;EAEnC,IAAMG,IAAI,GAAGC,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,IAAAE,0BAAmB,EAACD,IAAI,CAAC;EAEtD,IAAAE,2BAAgB,EAACF,IAAI,EAAEF,IAAI,CAAC;EAC5B,IAAAK,yCAA6B,EAACJ,YAAY,EAAED,IAAI,CAAC;AACnD,CAAC;AAED,IAAMZ,UAAU,GAAGA,CAACkB,CAAqB,EAAEC,KAAsB,KAAK;EACpE,IAAI,IAAAC,+CAAmC,EAACD,KAAK,CAAC,EAAE;IAC9C,IAAAE,+BAAmB,EAACF,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,IAAMpB,MAAM,GAAIuB,KAA2B,IAAK;EAC9C,IAAAC,sBAAe,EAACD,KAAK,CAAC;;EAEtB;EACA;EACA;EACA,IAAIE,yBAAyB,CAAC,CAAC,EAAE;IAC/B,MAAMF,KAAK;EACb;AACF,CAAC;AAED,IAAME,yBAAyB,GAAGA,CAAA,KAAMC,MAAM,CAACC,EAAE,CAAC7B,OAAO,CAAC8B,SAAS,CAAC,MAAM,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE7B,MAAM,CAAC","ignoreList":[]}