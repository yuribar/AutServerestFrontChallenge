{"version":3,"file":"mocha.js","names":["_lifecycle","require","_runtime","_testplan","_utils","ALLURE_REPORT_SYSTEM_HOOK","exports","registerMochaEventListeners","Cypress","mocha","getRunner","on","onStart","onSuite","onSuiteEnd","onHook","onHookEnd","onTest","onPass","onFail","onPending","onTestEnd","injectFlushMessageHooks","afterEach","flushRuntimeMessages","after","onAfterAll","initTestRuntime","reportRunStart","suite","root","applyTestPlan","spec","reportSuiteStart","hook","isAllureHook","reportHookStart","reportHookEnd","test","isTestReported","reportTestStart","testOrHook","err","isHook","isRootAfterAllHook","isAllureHookFailure","_testOrHook$duration","Date","now","duration","reportTestOrHookFail","completeHookErrorReporting","completeSpecIfNoAfterHookLeft"],"sources":["../../../../src/browser/events/mocha.ts"],"sourcesContent":["import type { CypressHook, CypressSuite, CypressTest } from \"../../types.js\";\nimport {\n  completeHookErrorReporting,\n  completeSpecIfNoAfterHookLeft,\n  flushRuntimeMessages,\n  reportTestPass as onPass,\n  reportTestSkip as onPending,\n  reportSuiteEnd as onSuiteEnd,\n  reportTestEnd as onTestEnd,\n  reportHookEnd,\n  reportHookStart,\n  reportRunStart,\n  reportSuiteStart,\n  reportTestOrHookFail,\n  reportTestStart,\n} from \"../lifecycle.js\";\nimport { initTestRuntime } from \"../runtime.js\";\nimport { applyTestPlan } from \"../testplan.js\";\nimport { isAllureHook, isRootAfterAllHook, isTestReported } from \"../utils.js\";\n\nexport const ALLURE_REPORT_SYSTEM_HOOK = \"__allure_report_system_hook__\";\n\nexport const registerMochaEventListeners = () => {\n  ((Cypress as any).mocha.getRunner() as Mocha.Runner)\n    .on(\"start\", onStart)\n    .on(\"suite\", onSuite)\n    .on(\"suite end\", onSuiteEnd)\n    .on(\"hook\", onHook)\n    .on(\"hook end\", onHookEnd)\n    .on(\"test\", onTest)\n    .on(\"pass\", onPass)\n    .on(\"fail\", onFail)\n    .on(\"pending\", onPending)\n    .on(\"test end\", onTestEnd);\n};\n\nexport const injectFlushMessageHooks = () => {\n  afterEach(ALLURE_REPORT_SYSTEM_HOOK, flushRuntimeMessages);\n  after(ALLURE_REPORT_SYSTEM_HOOK, onAfterAll);\n};\n\nconst onStart = () => {\n  initTestRuntime();\n  reportRunStart();\n};\n\nconst onSuite = (suite: CypressSuite) => {\n  if (suite.root) {\n    applyTestPlan(Cypress.spec, suite);\n  }\n  reportSuiteStart(suite);\n};\n\nconst onHook = (hook: CypressHook) => {\n  if (isAllureHook(hook)) {\n    return;\n  }\n\n  reportHookStart(hook);\n};\n\nconst onHookEnd = (hook: CypressHook) => {\n  if (isAllureHook(hook)) {\n    return;\n  }\n\n  reportHookEnd(hook);\n};\n\nconst onTest = (test: CypressTest) => {\n  // Cypress emits an extra EVENT_TEST_BEGIN if the test is skipped.\n  // reportTestSkip does that already, so we need to filter the extra event out.\n  if (!isTestReported(test)) {\n    reportTestStart(test);\n  }\n};\n\nconst onFail = (testOrHook: CypressTest | CypressHook, err: Error) => {\n  const isHook = \"hookName\" in testOrHook;\n  if (isHook && isRootAfterAllHook(testOrHook)) {\n    // Errors in spec-level 'after all' hooks are handled by Allure wrappers.\n    return;\n  }\n\n  const isAllureHookFailure = isHook && isAllureHook(testOrHook);\n\n  if (isAllureHookFailure) {\n    // Normally, Allure hooks are skipped from the report.\n    // In case of errors, it will be helpful to see them.\n    reportHookStart(testOrHook, Date.now() - (testOrHook.duration ?? 0));\n  }\n\n  // This will mark the fixture and the test (if any) as failed/broken.\n  reportTestOrHookFail(err);\n\n  if (isHook) {\n    // This will end the fixture and test (if any) and will report the remaining\n    // tests in the hook's suite (the ones that will be skipped by Cypress/Mocha).\n    completeHookErrorReporting(testOrHook, err);\n  }\n};\n\nconst onAfterAll = function (this: Mocha.Context) {\n  flushRuntimeMessages();\n  completeSpecIfNoAfterHookLeft(this);\n};\n"],"mappings":"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","ignoreList":[]}