{"version":3,"file":"lifecycle.js","names":["_allureJsCommons","require","_sdk","_runtime","_state","_steps","_utils","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","reportRunStart","enqueueRuntimeMessage","type","data","exports","reportSuiteStart","suite","id","name","title","root","start","Date","now","reportSuiteEnd","stop","reportHookStart","hook","scopeType","hookName","includes","position","reportHookEnd","_hook$duration","finalizeSteps","duration","reportTestStart","test","setCurrentTest","getTestStartData","markTestAsReported","reportStepStart","reportStepStop","step","status","statusDetails","getStepStopData","reportTestPass","reportTestOrHookFail","err","getStatusFromError","getMessageAndTraceFromError","stopAllSteps","completeHookErrorReporting","isEachHook","parent","testFailData","getStatusDataOfTestSkippedByHookError","reportCurrentTestIfAny","reportRemainingTests","reportTestSkip","isTestReported","Status","SKIPPED","message","getTestSkipData","reportTestEnd","_test$duration","_retries","retries","dropCurrentTest","reportScreenshot","path","contentType","ContentType","PNG","completeSpecIfNoAfterHookLeft","context","isLastRootAfterHook","isAllureHook","completeSpecAsync","completeSpecOnAfterHookFailure","hookError","allureError","logAllureRootAfterError","throwAfterSpecCompletion","_completeSpecOnAfterH","chain","then","flushRuntimeMessages","getTestRuntime","flushAllureMessagesToTask","flushAllureMessagesToTaskAsync","currentTest","getCurrentTest","iterateTests","reportTestsSkippedByHookError","pending","getTestStopData","suites","getSuitePath","map","s","_context$test$title","_context$test","console","error","concat","_unused"],"sources":["../../../src/browser/lifecycle.ts"],"sourcesContent":["import { ContentType, Status } from \"allure-js-commons\";\nimport type { StatusDetails } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { CypressFailMessage, CypressHook, CypressSuite, CypressTest, StepDescriptor } from \"../types.js\";\nimport { getTestRuntime } from \"./runtime.js\";\nimport { dropCurrentTest, enqueueRuntimeMessage, getCurrentTest, setCurrentTest } from \"./state.js\";\nimport { finalizeSteps, stopAllSteps } from \"./steps.js\";\nimport {\n  getStatusDataOfTestSkippedByHookError,\n  getStepStopData,\n  getSuitePath,\n  getTestSkipData,\n  getTestStartData,\n  getTestStopData,\n  isAllureHook,\n  isLastRootAfterHook,\n  isTestReported,\n  iterateTests,\n  markTestAsReported,\n} from \"./utils.js\";\n\nexport const reportRunStart = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_run_start\",\n    data: {},\n  });\n};\n\nexport const reportSuiteStart = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_start\",\n    data: {\n      id: suite.id,\n      name: suite.title,\n      root: suite.root,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportSuiteEnd = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_end\",\n    data: {\n      root: suite.root,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportHookStart = (hook: CypressHook, start?: number) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_start\",\n    data: {\n      name: hook.title,\n      scopeType: hook.hookName.includes(\"each\") ? \"each\" : \"all\",\n      position: hook.hookName.includes(\"before\") ? \"before\" : \"after\",\n      start: start ?? Date.now(),\n    },\n  });\n};\n\nexport const reportHookEnd = (hook: CypressHook) => {\n  finalizeSteps();\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_end\",\n    data: {\n      duration: hook.duration ?? 0,\n    },\n  });\n};\n\nexport const reportTestStart = (test: CypressTest) => {\n  setCurrentTest(test);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_start\",\n    data: getTestStartData(test),\n  });\n  markTestAsReported(test);\n};\n\nexport const reportStepStart = (id: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_step_start\",\n    data: {\n      id,\n      name,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportStepStop = (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_step_stop\",\n    data: getStepStopData(step, status, statusDetails),\n  });\n};\n\nexport const reportTestPass = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_test_pass\",\n    data: {},\n  });\n};\n\nexport const reportTestOrHookFail = (err: Error) => {\n  const status = getStatusFromError(err);\n  const statusDetails = getMessageAndTraceFromError(err);\n\n  stopAllSteps(status, statusDetails);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_fail\",\n    data: {\n      status,\n      statusDetails,\n    },\n  });\n};\n\nexport const completeHookErrorReporting = (hook: CypressHook, err: Error) => {\n  const isEachHook = hook.hookName.includes(\"each\");\n  const suite = hook.parent!;\n  const testFailData = getStatusDataOfTestSkippedByHookError(hook.title, isEachHook, err, suite);\n\n  // Cypress doens't emit 'hook end' if the hook has failed.\n  reportHookEnd(hook);\n\n  // Cypress doens't emit 'test end' if the hook has failed.\n  // We must report the test's end manualy in case of a 'before each' hook.\n  reportCurrentTestIfAny();\n\n  // Cypress skips the remaining tests in the suite of a failed hook.\n  // We should include them to the report manually.\n  reportRemainingTests(suite, testFailData);\n};\n\nexport const reportTestSkip = (test: CypressTest) => {\n  if (isTestReported(test)) {\n    stopAllSteps(Status.SKIPPED, {\n      message: \"The test was skipped before the command was completed\",\n    });\n  } else {\n    reportTestStart(test);\n  }\n\n  enqueueRuntimeMessage({\n    type: \"cypress_test_skip\",\n    data: getTestSkipData(),\n  });\n};\n\nexport const reportTestEnd = (test: CypressTest) => {\n  finalizeSteps();\n  enqueueRuntimeMessage({\n    type: \"cypress_test_end\",\n    data: {\n      duration: test.duration ?? 0,\n      retries: (test as any)._retries ?? 0,\n    },\n  });\n  dropCurrentTest();\n};\n\nexport const reportScreenshot = (path: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"attachment_path\",\n    data: { path, name, contentType: ContentType.PNG },\n  });\n};\n\nexport const completeSpecIfNoAfterHookLeft = (context: Mocha.Context) => {\n  if (isLastRootAfterHook(context)) {\n    const hook = context.test as CypressHook;\n    if (!isAllureHook(hook)) {\n      reportHookEnd(hook);\n    }\n    return completeSpecAsync();\n  }\n};\n\nexport const completeSpecOnAfterHookFailure = (\n  context: Mocha.Context,\n  hookError: Error,\n): Cypress.Chainable<unknown> | undefined => {\n  try {\n    reportTestOrHookFail(hookError);\n    completeHookErrorReporting(context.test as CypressHook, hookError);\n\n    // cy.task's then doesn't have onrejected, that's why we don't log async Allure errors here.\n    return completeSpecAsync();\n  } catch (allureError) {\n    logAllureRootAfterError(context, allureError);\n  }\n};\n\nexport const throwAfterSpecCompletion = (context: Mocha.Context, err: any) => {\n  const chain = completeSpecOnAfterHookFailure(context, err as Error)?.then(() => {\n    throw err;\n  });\n  if (!chain) {\n    throw err;\n  }\n};\n\nexport const flushRuntimeMessages = () => getTestRuntime().flushAllureMessagesToTask(\"reportAllureCypressSpecMessages\");\n\nexport const completeSpecAsync = () =>\n  getTestRuntime().flushAllureMessagesToTaskAsync(\"reportFinalAllureCypressSpecMessages\");\n\nconst reportCurrentTestIfAny = () => {\n  const currentTest = getCurrentTest();\n  if (currentTest) {\n    reportTestEnd(currentTest);\n  }\n};\n\nconst reportRemainingTests = (suite: CypressSuite, testFailData: CypressFailMessage[\"data\"]) => {\n  for (const test of iterateTests(suite)) {\n    // Some tests in the suite might've been already reported.\n    if (!isTestReported(test)) {\n      reportTestsSkippedByHookError(\n        test,\n        test.pending ? { ...getTestSkipData(), status: Status.SKIPPED } : testFailData,\n      );\n    }\n  }\n};\n\nconst reportTestsSkippedByHookError = (test: CypressTest, testFailData: CypressFailMessage[\"data\"]) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_skipped_test\",\n    data: {\n      ...getTestStartData(test),\n      ...testFailData,\n      ...getTestStopData(test),\n      suites: getSuitePath(test).map((s) => s.id),\n    },\n  });\n  markTestAsReported(test);\n};\n\nconst logAllureRootAfterError = (context: Mocha.Context, err: unknown) => {\n  // We play safe and swallow errors here to keep the original 'after all' error.\n  try {\n    // eslint-disable-next-line no-console\n    console.error(`Unexpected error when reporting the failure of ${context.test?.title ?? \"'after all'\"}`);\n    // eslint-disable-next-line no-console\n    console.error(err);\n  } catch {}\n};\n"],"mappings":"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","ignoreList":[]}