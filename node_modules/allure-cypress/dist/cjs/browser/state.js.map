{"version":3,"file":"state.js","names":["_utils","require","getAllureState","state","Cypress","env","config","DEFAULT_RUNTIME_CONFIG","initialized","messages","testPlan","undefined","currentTest","projectDir","stepStack","stepsToFinalize","nextApiStepId","exports","isAllureInitialized","setAllureInitialized","getRuntimeMessages","setRuntimeMessages","value","enqueueRuntimeMessage","message","push","getAllureTestPlan","getProjectDir","getCurrentTest","setCurrentTest","test","dropCurrentTest","getConfig","getStepStack","getCurrentStep","last","pushStep","step","popStep","pop","popSteps","index","toReversed","splice","popAllSteps","clearStepStack","setupStepFinalization","finalizer","getStepsToFinalize","clearStepsToFinalize"],"sources":["../../../src/browser/state.ts"],"sourcesContent":["import type { AllureSpecState, CypressMessage, CypressTest, StepDescriptor, StepFinalizer } from \"../types.js\";\nimport { DEFAULT_RUNTIME_CONFIG, last, toReversed } from \"../utils.js\";\n\nexport const getAllureState = () => {\n  let state = Cypress.env(\"allure\") as AllureSpecState;\n\n  if (!state) {\n    state = {\n      config: DEFAULT_RUNTIME_CONFIG,\n      initialized: false,\n      messages: [],\n      testPlan: undefined,\n      currentTest: undefined,\n      projectDir: undefined,\n      stepStack: [],\n      stepsToFinalize: [],\n      nextApiStepId: 0,\n    };\n\n    Cypress.env(\"allure\", state);\n  }\n\n  return state;\n};\n\nexport const isAllureInitialized = () => getAllureState().initialized;\n\nexport const setAllureInitialized = () => {\n  getAllureState().initialized = true;\n};\n\nexport const getRuntimeMessages = () => getAllureState().messages;\n\nexport const setRuntimeMessages = (value: CypressMessage[]) => {\n  getAllureState().messages = value;\n};\n\nexport const enqueueRuntimeMessage = (message: CypressMessage) => {\n  getRuntimeMessages().push(message);\n};\n\nexport const getAllureTestPlan = () => getAllureState().testPlan;\n\nexport const getProjectDir = () => getAllureState().projectDir;\n\nexport const getCurrentTest = () => getAllureState().currentTest;\n\nexport const setCurrentTest = (test: CypressTest) => {\n  getAllureState().currentTest = test;\n};\n\nexport const dropCurrentTest = () => {\n  getAllureState().currentTest = undefined;\n};\n\nexport const getConfig = () => getAllureState().config;\n\nexport const getStepStack = () => getAllureState().stepStack;\n\nexport const getCurrentStep = () => last(getStepStack());\n\nexport const pushStep = (step: StepDescriptor) => getStepStack().push(step);\n\nexport const popStep = () => getStepStack().pop();\n\nexport const popSteps = (index: number) => toReversed(getStepStack().splice(index));\n\nexport const popAllSteps = () => popSteps(0);\n\nexport const clearStepStack = () => {\n  getAllureState().stepStack = [];\n};\n\nexport const setupStepFinalization = <T extends StepDescriptor>(step: T, finalizer?: StepFinalizer) =>\n  getAllureState().stepsToFinalize.push([step, finalizer]);\n\nexport const getStepsToFinalize = () => getAllureState().stepsToFinalize;\n\nexport const clearStepsToFinalize = () => {\n  const state = getAllureState();\n  state.stepsToFinalize = [];\n};\n"],"mappings":"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","ignoreList":[]}