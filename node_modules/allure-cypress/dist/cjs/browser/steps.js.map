{"version":3,"file":"steps.js","names":["_allureJsCommons","require","_sdk","_utils","_lifecycle","_state","_utils2","ALLURE_STEP_CMD_SUBJECT","exports","isApiStep","descriptor","type","isLogStep","startAllureApiStep","name","reportStepStart","pushAllureStep","id","generateApiStepId","pushStep","reportStepError","error","status","getStatusFromError","statusDetails","getMessageAndTraceFromError","stopAllureApiStepStackTip","associateErrorWithRunningSteps","stopCurrentAllureApiStep","findAndStopStepWithSubsteps","stepDescriptor","pred","stopSelectedSteps","popUntilFindIncluded","getStepStack","stopAllSteps","popAllSteps","finalizeSteps","getStepsToFinalize","forEach","finalizeOneStep","clearStepsToFinalize","resolveStepStatus","step","Status","PASSED","_ref","finalizer","data","enqueueRuntimeMessage","stepStack","firstApiStepAfterLastLogStep","at","findLastIndex","logEntryOrMessage","Object","is","propagateErrorToStepDescriptor","errorOfSubstep","log","attributes","steps","stepEntry","stopStep","reportStepStop","setupStepFinalization"],"sources":["../../../src/browser/steps.ts"],"sourcesContent":["import type { StatusDetails } from \"allure-js-commons\";\nimport { Status } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type {\n  ApiStepDescriptor,\n  CypressStepFinalizeMessage,\n  LogStepDescriptor,\n  StepDescriptor,\n  StepFinalizer,\n} from \"../types.js\";\nimport { popUntilFindIncluded } from \"../utils.js\";\nimport { reportStepStart, reportStepStop } from \"./lifecycle.js\";\nimport {\n  clearStepsToFinalize,\n  enqueueRuntimeMessage,\n  getStepStack,\n  getStepsToFinalize,\n  popAllSteps,\n  pushStep,\n  setupStepFinalization,\n} from \"./state.js\";\nimport { generateApiStepId } from \"./utils.js\";\n\nexport const ALLURE_STEP_CMD_SUBJECT = {};\n\nexport const isApiStep = (descriptor: StepDescriptor): descriptor is ApiStepDescriptor => {\n  return descriptor.type === \"api\";\n};\n\nexport const isLogStep = (descriptor: StepDescriptor): descriptor is LogStepDescriptor => {\n  return descriptor.type === \"log\";\n};\n\nexport const startAllureApiStep = (name: string) => reportStepStart(pushAllureStep(), name);\n\nexport const pushAllureStep = () => {\n  const id = generateApiStepId();\n  pushStep({ id, type: \"api\" });\n  return id;\n};\n\nexport const reportStepError = (error: Error) => {\n  const status = getStatusFromError(error);\n  const statusDetails = getMessageAndTraceFromError(error);\n\n  // Cypress will abort the test/hook execution soon. No subsequent commands will be run, including the ones that\n  // have been scheduled by `allure.step` to stop the currently running steps.\n  // Additionally, we can't tell in advance if the current command log steps will be stopped normally or not.\n  //\n  // Given that, this function will stop all consecutive Allure API steps at the tip of the step stack.\n  // The command log steps will be given a chance to stop normally to get the most correct timings.\n  //\n  // The command log steps that won't stop normally (and Allure API substeps thereof) will be stopped during the\n  // test/hook finalization phase.\n  stopAllureApiStepStackTip(status, statusDetails);\n\n  // It's not guaranteed for command log steps and intermediate Allure API steps to have access to the error at the\n  // moment they are stopped.\n  // Additionally, Cypress may not update the stack trace of the error at that time. Until that happens, the stack\n  // trace points deep in the bundled code, which is little to no use for the user. Therefore, we need to associate\n  // the remaining steps with the error object to grab the updated stack trace later.\n  associateErrorWithRunningSteps(error);\n};\n\nexport const stopCurrentAllureApiStep = (status?: Status, statusDetails?: StatusDetails) =>\n  findAndStopStepWithSubsteps((stepDescriptor) => isApiStep(stepDescriptor), status, statusDetails);\n\nexport const findAndStopStepWithSubsteps = (\n  pred: (stepEntry: StepDescriptor) => boolean,\n  status?: Status,\n  statusDetails?: StatusDetails,\n) => stopSelectedSteps(popUntilFindIncluded(getStepStack(), pred), status, statusDetails);\n\nexport const stopAllSteps = (status?: Status, statusDetails?: StatusDetails) =>\n  stopSelectedSteps(popAllSteps(), status, statusDetails);\n\nexport const finalizeSteps = () => {\n  // This will stop all dangling steps (like log groups with missing endGroup calls or logs that haven't been\n  // finished by Cypress due to an error).\n  stopAllSteps();\n\n  getStepsToFinalize().forEach(finalizeOneStep);\n  clearStepsToFinalize();\n};\n\nexport const resolveStepStatus = (step: StepDescriptor) =>\n  step.error ? getStatusFromError(step.error) : Status.PASSED;\n\nconst finalizeOneStep = ([step, finalizer]: [StepDescriptor, StepFinalizer | undefined]) => {\n  const { id, error } = step;\n  const data: CypressStepFinalizeMessage[\"data\"] = { id };\n\n  if (error) {\n    // Cypress rewrites the stack trace of an error to point to the location in the test file. Until then, the stack\n    // trace points inside the messy bundle, which is not helpful. There are circumstances when we can't be sure this\n    // has happened when a step is about to stop. That's why we defer setting the status details until we are sure\n    // Cypress does its job.\n    data.statusDetails = getMessageAndTraceFromError(error);\n  }\n\n  finalizer?.(data);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_step_finalize\",\n    data,\n  });\n};\n\nconst stopAllureApiStepStackTip = (status: Status, statusDetails: StatusDetails) => {\n  const stepStack = getStepStack();\n  const firstApiStepAfterLastLogStep = stepStack.at(stepStack.findLastIndex(isLogStep) + 1);\n  if (firstApiStepAfterLastLogStep) {\n    findAndStopStepWithSubsteps(\n      (logEntryOrMessage) => Object.is(logEntryOrMessage, firstApiStepAfterLastLogStep),\n      status,\n      statusDetails,\n    );\n  }\n};\n\nconst propagateErrorToStepDescriptor = (step: StepDescriptor, errorOfSubstep: Error | undefined) => {\n  if (isLogStep(step)) {\n    const error = step.log.attributes.error;\n    if (error) {\n      return (step.error = error);\n    }\n  }\n\n  if (errorOfSubstep) {\n    step.error = errorOfSubstep;\n  }\n\n  return step.error;\n};\n\nconst stopSelectedSteps = (steps: readonly StepDescriptor[], status?: Status, statusDetails?: StatusDetails) => {\n  let error: Error | undefined;\n  for (const stepEntry of steps) {\n    error = propagateErrorToStepDescriptor(stepEntry, error);\n    stopStep(stepEntry, status, statusDetails);\n  }\n\n  if (error) {\n    associateErrorWithRunningSteps(error);\n  }\n};\n\nconst associateErrorWithRunningSteps = (error: Error) => getStepStack().forEach((step) => (step.error = error));\n\nconst stopStep = (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {\n  reportStepStop(step, status, statusDetails);\n\n  if (isApiStep(step) && step.error) {\n    setupStepFinalization(step);\n  }\n};\n"],"mappings":";;;;;;AACA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AAQA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,UAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AASA,IAAAK,OAAA,GAAAL,OAAA;AAEO,IAAMM,uBAAuB,GAAAC,OAAA,CAAAD,uBAAA,GAAG,CAAC,CAAC;AAElC,IAAME,SAAS,GAAIC,UAA0B,IAAsC;EACxF,OAAOA,UAAU,CAACC,IAAI,KAAK,KAAK;AAClC,CAAC;AAACH,OAAA,CAAAC,SAAA,GAAAA,SAAA;AAEK,IAAMG,SAAS,GAAIF,UAA0B,IAAsC;EACxF,OAAOA,UAAU,CAACC,IAAI,KAAK,KAAK;AAClC,CAAC;AAACH,OAAA,CAAAI,SAAA,GAAAA,SAAA;AAEK,IAAMC,kBAAkB,GAAIC,IAAY,IAAK,IAAAC,0BAAe,EAACC,cAAc,CAAC,CAAC,EAAEF,IAAI,CAAC;AAACN,OAAA,CAAAK,kBAAA,GAAAA,kBAAA;AAErF,IAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAMC,EAAE,GAAG,IAAAC,yBAAiB,EAAC,CAAC;EAC9B,IAAAC,eAAQ,EAAC;IAAEF,EAAE;IAAEN,IAAI,EAAE;EAAM,CAAC,CAAC;EAC7B,OAAOM,EAAE;AACX,CAAC;AAACT,OAAA,CAAAQ,cAAA,GAAAA,cAAA;AAEK,IAAMI,eAAe,GAAIC,KAAY,IAAK;EAC/C,IAAMC,MAAM,GAAG,IAAAC,uBAAkB,EAACF,KAAK,CAAC;EACxC,IAAMG,aAAa,GAAG,IAAAC,gCAA2B,EAACJ,KAAK,CAAC;;EAExD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAK,yBAAyB,CAACJ,MAAM,EAAEE,aAAa,CAAC;;EAEhD;EACA;EACA;EACA;EACA;EACAG,8BAA8B,CAACN,KAAK,CAAC;AACvC,CAAC;AAACb,OAAA,CAAAY,eAAA,GAAAA,eAAA;AAEK,IAAMQ,wBAAwB,GAAGA,CAACN,MAAe,EAAEE,aAA6B,KACrFK,2BAA2B,CAAEC,cAAc,IAAKrB,SAAS,CAACqB,cAAc,CAAC,EAAER,MAAM,EAAEE,aAAa,CAAC;AAAChB,OAAA,CAAAoB,wBAAA,GAAAA,wBAAA;AAE7F,IAAMC,2BAA2B,GAAGA,CACzCE,IAA4C,EAC5CT,MAAe,EACfE,aAA6B,KAC1BQ,iBAAiB,CAAC,IAAAC,2BAAoB,EAAC,IAAAC,mBAAY,EAAC,CAAC,EAAEH,IAAI,CAAC,EAAET,MAAM,EAAEE,aAAa,CAAC;AAAChB,OAAA,CAAAqB,2BAAA,GAAAA,2BAAA;AAEnF,IAAMM,YAAY,GAAGA,CAACb,MAAe,EAAEE,aAA6B,KACzEQ,iBAAiB,CAAC,IAAAI,kBAAW,EAAC,CAAC,EAAEd,MAAM,EAAEE,aAAa,CAAC;AAAChB,OAAA,CAAA2B,YAAA,GAAAA,YAAA;AAEnD,IAAME,aAAa,GAAGA,CAAA,KAAM;EACjC;EACA;EACAF,YAAY,CAAC,CAAC;EAEd,IAAAG,yBAAkB,EAAC,CAAC,CAACC,OAAO,CAACC,eAAe,CAAC;EAC7C,IAAAC,2BAAoB,EAAC,CAAC;AACxB,CAAC;AAACjC,OAAA,CAAA6B,aAAA,GAAAA,aAAA;AAEK,IAAMK,iBAAiB,GAAIC,IAAoB,IACpDA,IAAI,CAACtB,KAAK,GAAG,IAAAE,uBAAkB,EAACoB,IAAI,CAACtB,KAAK,CAAC,GAAGuB,uBAAM,CAACC,MAAM;AAACrC,OAAA,CAAAkC,iBAAA,GAAAA,iBAAA;AAE9D,IAAMF,eAAe,GAAGM,IAAA,IAAoE;EAAA,IAAnE,CAACH,IAAI,EAAEI,SAAS,CAA8C,GAAAD,IAAA;EACrF,IAAM;IAAE7B,EAAE;IAAEI;EAAM,CAAC,GAAGsB,IAAI;EAC1B,IAAMK,IAAwC,GAAG;IAAE/B;EAAG,CAAC;EAEvD,IAAII,KAAK,EAAE;IACT;IACA;IACA;IACA;IACA2B,IAAI,CAACxB,aAAa,GAAG,IAAAC,gCAA2B,EAACJ,KAAK,CAAC;EACzD;EAEA0B,SAAS,aAATA,SAAS,eAATA,SAAS,CAAGC,IAAI,CAAC;EAEjB,IAAAC,4BAAqB,EAAC;IACpBtC,IAAI,EAAE,uBAAuB;IAC7BqC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,IAAMtB,yBAAyB,GAAGA,CAACJ,MAAc,EAAEE,aAA4B,KAAK;EAClF,IAAM0B,SAAS,GAAG,IAAAhB,mBAAY,EAAC,CAAC;EAChC,IAAMiB,4BAA4B,GAAGD,SAAS,CAACE,EAAE,CAACF,SAAS,CAACG,aAAa,CAACzC,SAAS,CAAC,GAAG,CAAC,CAAC;EACzF,IAAIuC,4BAA4B,EAAE;IAChCtB,2BAA2B,CACxByB,iBAAiB,IAAKC,MAAM,CAACC,EAAE,CAACF,iBAAiB,EAAEH,4BAA4B,CAAC,EACjF7B,MAAM,EACNE,aACF,CAAC;EACH;AACF,CAAC;AAED,IAAMiC,8BAA8B,GAAGA,CAACd,IAAoB,EAAEe,cAAiC,KAAK;EAClG,IAAI9C,SAAS,CAAC+B,IAAI,CAAC,EAAE;IACnB,IAAMtB,KAAK,GAAGsB,IAAI,CAACgB,GAAG,CAACC,UAAU,CAACvC,KAAK;IACvC,IAAIA,KAAK,EAAE;MACT,OAAQsB,IAAI,CAACtB,KAAK,GAAGA,KAAK;IAC5B;EACF;EAEA,IAAIqC,cAAc,EAAE;IAClBf,IAAI,CAACtB,KAAK,GAAGqC,cAAc;EAC7B;EAEA,OAAOf,IAAI,CAACtB,KAAK;AACnB,CAAC;AAED,IAAMW,iBAAiB,GAAGA,CAAC6B,KAAgC,EAAEvC,MAAe,EAAEE,aAA6B,KAAK;EAC9G,IAAIH,KAAwB;EAC5B,KAAK,IAAMyC,SAAS,IAAID,KAAK,EAAE;IAC7BxC,KAAK,GAAGoC,8BAA8B,CAACK,SAAS,EAAEzC,KAAK,CAAC;IACxD0C,QAAQ,CAACD,SAAS,EAAExC,MAAM,EAAEE,aAAa,CAAC;EAC5C;EAEA,IAAIH,KAAK,EAAE;IACTM,8BAA8B,CAACN,KAAK,CAAC;EACvC;AACF,CAAC;AAED,IAAMM,8BAA8B,GAAIN,KAAY,IAAK,IAAAa,mBAAY,EAAC,CAAC,CAACK,OAAO,CAAEI,IAAI,IAAMA,IAAI,CAACtB,KAAK,GAAGA,KAAM,CAAC;AAE/G,IAAM0C,QAAQ,GAAGA,CAACpB,IAAoB,EAAErB,MAAe,EAAEE,aAA6B,KAAK;EACzF,IAAAwC,yBAAc,EAACrB,IAAI,EAAErB,MAAM,EAAEE,aAAa,CAAC;EAE3C,IAAIf,SAAS,CAACkC,IAAI,CAAC,IAAIA,IAAI,CAACtB,KAAK,EAAE;IACjC,IAAA4C,4BAAqB,EAACtB,IAAI,CAAC;EAC7B;AACF,CAAC","ignoreList":[]}