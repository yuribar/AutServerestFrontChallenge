{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["import type { Label, Parameter, Status, StatusDetails } from \"allure-js-commons\";\nimport type {\n  RuntimeMessage,\n  RuntimeStartStepMessage,\n  RuntimeStopStepMessage,\n  TestPlanV1,\n} from \"allure-js-commons/sdk\";\nimport type { ReporterConfig } from \"allure-js-commons/sdk/reporter\";\n\nexport type AllureCypressConfig = ReporterConfig & {\n  videoOnFailOnly?: boolean;\n  stepsFromCommands?: Partial<AllureSpecState[\"config\"][\"stepsFromCommands\"]>;\n};\n\nexport type CypressSuite = Mocha.Suite & {\n  id: string;\n  parent: CypressSuite | undefined;\n  tests: CypressTest[];\n  suites: CypressSuite[];\n};\n\nexport type CypressTest = Mocha.Test & {\n  wallClockStartedAt?: Date;\n  parent: CypressSuite | undefined;\n};\n\nexport type CypressHook = Mocha.Hook & {\n  hookId: string;\n  hookName: string;\n  parent: CypressSuite | undefined;\n};\n\nexport type CypressCommand = {\n  attributes: {\n    name: string;\n    id: string;\n    args: any[];\n  };\n  state: \"passed\" | \"failed\" | \"queued\";\n};\n\nexport type CypressLogEntry = ReturnType<typeof Cypress.log> & {\n  attributes: {\n    id: string;\n    error?: Error;\n    name: string;\n    message: string;\n    displayName?: string;\n    event: boolean;\n    type: string;\n    instrument: string;\n    groupStart: boolean;\n    createdAtTimestamp: number;\n    updatedAtTimestamp: number;\n    end?: boolean;\n    renderProps: () => {\n      message: string;\n    };\n    consoleProps: () => {\n      name: string;\n      props: Record<string, unknown>;\n    };\n  };\n  endGroup: () => unknown;\n};\n\nexport type CupressRunStart = {\n  type: \"cypress_run_start\";\n  data: object;\n};\n\nexport type CypressSuiteStartMessage = {\n  type: \"cypress_suite_start\";\n  data: {\n    id: string;\n    name: string;\n    root: boolean;\n    start: number;\n  };\n};\n\nexport type CypressSuiteEndMessage = {\n  type: \"cypress_suite_end\";\n  data: {\n    root: boolean;\n    stop: number;\n  };\n};\n\nexport type CypressHookStartMessage = {\n  type: \"cypress_hook_start\";\n  data: {\n    name: string;\n    scopeType: \"each\" | \"all\";\n    position: \"before\" | \"after\";\n    start: number;\n  };\n};\n\nexport type CypressHookEndMessage = {\n  type: \"cypress_hook_end\";\n  data: {\n    duration: number;\n  };\n};\n\nexport type CypressTestStartMessage = {\n  type: \"cypress_test_start\";\n  data: {\n    name: string;\n    fullNameSuffix: string;\n    start: number;\n    labels: Label[];\n  };\n};\n\nexport type CypressFailMessage = {\n  type: \"cypress_fail\";\n  data: {\n    status: Status;\n    statusDetails: StatusDetails;\n  };\n};\n\nexport type CypressTestSkipMessage = {\n  type: \"cypress_test_skip\";\n  data: {\n    statusDetails?: StatusDetails;\n  };\n};\n\nexport type CypressTestPassMessage = {\n  type: \"cypress_test_pass\";\n  data: object;\n};\n\nexport type CypressSkippedTestMessage = {\n  type: \"cypress_skipped_test\";\n  data: CypressTestStartMessage[\"data\"] &\n    CypressFailMessage[\"data\"] &\n    CypressTestEndMessage[\"data\"] & {\n      suites: string[];\n    };\n};\n\nexport type CypressTestEndMessage = {\n  type: \"cypress_test_end\";\n  data: {\n    duration: number;\n    retries: number;\n  };\n};\n\nexport type CypressStepStartMessage = {\n  type: \"cypress_step_start\";\n  data: {\n    id: string;\n    name: string;\n    start: number;\n  };\n};\n\nexport type CypressStepStopMessage = {\n  type: \"cypress_step_stop\";\n  data: {\n    id: string;\n    status: Status;\n    statusDetails?: StatusDetails;\n    stop: number;\n  };\n};\n\nexport type CypressStepFinalizeMessage = {\n  type: \"cypress_step_finalize\";\n  data: {\n    id: string;\n    name?: string;\n    parameters?: Parameter[];\n    statusDetails?: StatusDetails;\n  };\n};\n\nexport type CypressMessage =\n  | Exclude<RuntimeMessage, RuntimeStartStepMessage | RuntimeStopStepMessage>\n  | CupressRunStart\n  | CypressSuiteStartMessage\n  | CypressSuiteEndMessage\n  | CypressHookStartMessage\n  | CypressHookEndMessage\n  | CypressTestStartMessage\n  | CypressStepStartMessage\n  | CypressStepStopMessage\n  | CypressStepFinalizeMessage\n  | CypressTestPassMessage\n  | CypressFailMessage\n  | CypressTestSkipMessage\n  | CypressSkippedTestMessage\n  | CypressTestEndMessage;\n\nexport type SpecContext = {\n  specPath: string;\n  test: string | undefined;\n  fixture: string | undefined;\n  stepsByFrontEndId: Map<string, string>;\n  videoScope: string;\n  suiteIdToScope: Map<string, string>;\n  suiteScopeToId: Map<string, string>;\n  suiteScopes: string[];\n  testScope: string | undefined;\n  suiteNames: string[];\n  failed: boolean;\n};\n\ntype StepDescriptorBase = {\n  id: string;\n  error?: Error;\n};\n\nexport type LogStepDescriptor = StepDescriptorBase & {\n  type: \"log\";\n  attachmentName?: string;\n  log: CypressLogEntry;\n};\n\nexport type ApiStepDescriptor = StepDescriptorBase & {\n  type: \"api\";\n};\n\nexport type StepDescriptor = LogStepDescriptor | ApiStepDescriptor;\n\nexport type StepFinalizer = (message: CypressStepFinalizeMessage[\"data\"]) => void;\n\nexport type AllureSpecState = {\n  config: {\n    stepsFromCommands: {\n      maxArgumentLength: number;\n      maxArgumentDepth: number;\n    };\n  };\n  initialized: boolean;\n  testPlan: TestPlanV1 | null | undefined;\n  projectDir?: string;\n  messages: CypressMessage[];\n  currentTest?: CypressTest;\n  stepStack: StepDescriptor[];\n  stepsToFinalize: [step: StepDescriptor, finalizer: StepFinalizer | undefined][];\n  nextApiStepId: number;\n};\n\nexport type AllureCypressTaskArgs = {\n  absolutePath: string;\n  messages: readonly CypressMessage[];\n  isInteractive: boolean;\n};\n\nexport type CypressSuiteFunction = (\n  title: string,\n  configOrFn?: Cypress.SuiteConfigOverrides | ((this: Mocha.Suite) => void),\n  fn?: (this: Mocha.Suite) => void,\n) => Mocha.Suite;\n\nexport type DirectHookImplementation = Mocha.AsyncFunc | ((this: Mocha.Context) => void);\nexport type HookImplementation = Mocha.Func | DirectHookImplementation;\n"],"mappings":"","ignoreList":[]}